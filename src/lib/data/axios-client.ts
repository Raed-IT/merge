//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import type { AxiosError } from 'axios';
export * as Client from './axios-client/Client';
export * from './static-axios-client';


//-----Types.File-----
export class ActionAdditionalInformation implements IActionAdditionalInformation {
    readyForAngular?: boolean;

    constructor(data?: IActionAdditionalInformation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.readyForAngular = _data["readyForAngular"];
        }
    }

    static fromJS(data: any): ActionAdditionalInformation {
        data = typeof data === 'object' ? data : {};
        let result = new ActionAdditionalInformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["readyForAngular"] = this.readyForAngular;
        return data;
    }
}

export interface IActionAdditionalInformation {
    readyForAngular?: boolean;
}

export class ActionDto implements IActionDto {
    id?: string;
    localizations?: string | null;
    areas?: string | null;
    isSystem?: boolean;
    organizationId?: string;
    roles?: string | null;
    moduleId?: string | null;
    name?: string | null;
    icon?: string | null;
    sortOrder?: number | null;
    url?: string | null;
    popup?: boolean | null;
    groupName?: string | null;
    actionUrls?: ActionUrl[] | null;
    additionalInformationParsed?: ActionAdditionalInformation;

    constructor(data?: IActionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.localizations = _data["localizations"];
            this.areas = _data["areas"];
            this.isSystem = _data["isSystem"];
            this.organizationId = _data["organizationId"];
            this.roles = _data["roles"];
            this.moduleId = _data["moduleId"];
            this.name = _data["name"];
            this.icon = _data["icon"];
            this.sortOrder = _data["sortOrder"];
            this.url = _data["url"];
            this.popup = _data["popup"];
            this.groupName = _data["groupName"];
            if (Array.isArray(_data["actionUrls"])) {
                this.actionUrls = [] as any;
                for (let item of _data["actionUrls"])
                    this.actionUrls!.push(ActionUrl.fromJS(item));
            }
            this.additionalInformationParsed = _data["additionalInformationParsed"] ? ActionAdditionalInformation.fromJS(_data["additionalInformationParsed"]) : <any>null;
        }
    }

    static fromJS(data: any): ActionDto {
        data = typeof data === 'object' ? data : {};
        let result = new ActionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["localizations"] = this.localizations;
        data["areas"] = this.areas;
        data["isSystem"] = this.isSystem;
        data["organizationId"] = this.organizationId;
        data["roles"] = this.roles;
        data["moduleId"] = this.moduleId;
        data["name"] = this.name;
        data["icon"] = this.icon;
        data["sortOrder"] = this.sortOrder;
        data["url"] = this.url;
        data["popup"] = this.popup;
        data["groupName"] = this.groupName;
        if (Array.isArray(this.actionUrls)) {
            data["actionUrls"] = [];
            for (let item of this.actionUrls)
                data["actionUrls"].push(item.toJSON());
        }
        data["additionalInformationParsed"] = this.additionalInformationParsed ? this.additionalInformationParsed.toJSON() : this.additionalInformationParsed;
        return data;
    }
}

export interface IActionDto {
    id?: string;
    localizations?: string | null;
    areas?: string | null;
    isSystem?: boolean;
    organizationId?: string;
    roles?: string | null;
    moduleId?: string | null;
    name?: string | null;
    icon?: string | null;
    sortOrder?: number | null;
    url?: string | null;
    popup?: boolean | null;
    groupName?: string | null;
    actionUrls?: ActionUrl[] | null;
    additionalInformationParsed?: ActionAdditionalInformation;
}

export class ActionResult implements IActionResult {

    constructor(data?: IActionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ActionResult {
        data = typeof data === 'object' ? data : {};
        let result = new ActionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IActionResult {
}

export class ActionUrl implements IActionUrl {
    icon?: string | null;
    class?: string | null;
    multiple?: boolean | null;
    text?: string | null;
    urlTemplate?: string | null;
    showConfirmation?: boolean | null;
    confirmationMessage?: string | null;
    target?: string | null;

    constructor(data?: IActionUrl) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.icon = _data["icon"];
            this.class = _data["class"];
            this.multiple = _data["multiple"];
            this.text = _data["text"];
            this.urlTemplate = _data["urlTemplate"];
            this.showConfirmation = _data["showConfirmation"];
            this.confirmationMessage = _data["confirmationMessage"];
            this.target = _data["target"];
        }
    }

    static fromJS(data: any): ActionUrl {
        data = typeof data === 'object' ? data : {};
        let result = new ActionUrl();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["icon"] = this.icon;
        data["class"] = this.class;
        data["multiple"] = this.multiple;
        data["text"] = this.text;
        data["urlTemplate"] = this.urlTemplate;
        data["showConfirmation"] = this.showConfirmation;
        data["confirmationMessage"] = this.confirmationMessage;
        data["target"] = this.target;
        return data;
    }
}

export interface IActionUrl {
    icon?: string | null;
    class?: string | null;
    multiple?: boolean | null;
    text?: string | null;
    urlTemplate?: string | null;
    showConfirmation?: boolean | null;
    confirmationMessage?: string | null;
    target?: string | null;
}

export class AddressDto implements IAddressDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    companyId?: string;
    title?: string | null;
    type?: AddressType;
    street?: string | null;
    block?: string | null;
    zipCode?: string | null;
    city?: string | null;
    country?: string | null;
    state?: string | null;
    latitude?: number | null;
    longitude?: number | null;

    constructor(data?: IAddressDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>null;
            this.createdBy = _data["createdBy"];
            this.updatedBy = _data["updatedBy"];
            this.companyId = _data["companyId"];
            this.title = _data["title"];
            this.type = _data["type"];
            this.street = _data["street"];
            this.block = _data["block"];
            this.zipCode = _data["zipCode"];
            this.city = _data["city"];
            this.country = _data["country"];
            this.state = _data["state"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
        }
    }

    static fromJS(data: any): AddressDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddressDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createDate"] = this.createDate && this.createDate.toISOString();
        data["updateDate"] = this.updateDate && this.updateDate.toISOString();
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["companyId"] = this.companyId;
        data["title"] = this.title;
        data["type"] = this.type;
        data["street"] = this.street;
        data["block"] = this.block;
        data["zipCode"] = this.zipCode;
        data["city"] = this.city;
        data["country"] = this.country;
        data["state"] = this.state;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        return data;
    }
}

export interface IAddressDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    companyId?: string;
    title?: string | null;
    type?: AddressType;
    street?: string | null;
    block?: string | null;
    zipCode?: string | null;
    city?: string | null;
    country?: string | null;
    state?: string | null;
    latitude?: number | null;
    longitude?: number | null;
}

export enum AddressType {
    BillTo = "BillTo",
    ShipTo = "ShipTo",
}

export class ApiKeyDto implements IApiKeyDto {
    key?: string | null;
    name?: string | null;
    description?: string | null;

    constructor(data?: IApiKeyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): ApiKeyDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiKeyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

export interface IApiKeyDto {
    key?: string | null;
    name?: string | null;
    description?: string | null;
}

export class AppDto implements IAppDto {
    id?: string;
    localizations?: string | null;
    areas?: string | null;
    isSystem?: boolean;
    organizationId?: string;
    code?: string | null;
    name?: string | null;
    indexUrl?: string | null;
    rootMenuId?: string | null;
    description?: string | null;
    rootMenu?: MenuDto;

    constructor(data?: IAppDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.localizations = _data["localizations"];
            this.areas = _data["areas"];
            this.isSystem = _data["isSystem"];
            this.organizationId = _data["organizationId"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.indexUrl = _data["indexUrl"];
            this.rootMenuId = _data["rootMenuId"];
            this.description = _data["description"];
            this.rootMenu = _data["rootMenu"] ? MenuDto.fromJS(_data["rootMenu"]) : <any>null;
        }
    }

    static fromJS(data: any): AppDto {
        data = typeof data === 'object' ? data : {};
        let result = new AppDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["localizations"] = this.localizations;
        data["areas"] = this.areas;
        data["isSystem"] = this.isSystem;
        data["organizationId"] = this.organizationId;
        data["code"] = this.code;
        data["name"] = this.name;
        data["indexUrl"] = this.indexUrl;
        data["rootMenuId"] = this.rootMenuId;
        data["description"] = this.description;
        data["rootMenu"] = this.rootMenu ? this.rootMenu.toJSON() : this.rootMenu;
        return data;
    }
}

export interface IAppDto {
    id?: string;
    localizations?: string | null;
    areas?: string | null;
    isSystem?: boolean;
    organizationId?: string;
    code?: string | null;
    name?: string | null;
    indexUrl?: string | null;
    rootMenuId?: string | null;
    description?: string | null;
    rootMenu?: MenuDto;
}

export enum AreaType {
    Employee = "Employee",
    CustomerPortal = "CustomerPortal",
    SupplierPortal = "SupplierPortal",
}

export class AssetDto implements IAssetDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    name?: string | null;
    relatedObjectId?: string;
    relatedObjectType?: AssetRelatedObject;
    isPrivate?: boolean;
    metadata?: string | null;
    versions?: AssetVersionDto[] | null;

    constructor(data?: IAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>null;
            this.createdBy = _data["createdBy"];
            this.updatedBy = _data["updatedBy"];
            this.name = _data["name"];
            this.relatedObjectId = _data["relatedObjectId"];
            this.relatedObjectType = _data["relatedObjectType"];
            this.isPrivate = _data["isPrivate"];
            this.metadata = _data["metadata"];
            if (Array.isArray(_data["versions"])) {
                this.versions = [] as any;
                for (let item of _data["versions"])
                    this.versions!.push(AssetVersionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new AssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createDate"] = this.createDate && this.createDate.toISOString();
        data["updateDate"] = this.updateDate && this.updateDate.toISOString();
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["name"] = this.name;
        data["relatedObjectId"] = this.relatedObjectId;
        data["relatedObjectType"] = this.relatedObjectType;
        data["isPrivate"] = this.isPrivate;
        data["metadata"] = this.metadata;
        if (Array.isArray(this.versions)) {
            data["versions"] = [];
            for (let item of this.versions)
                data["versions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAssetDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    name?: string | null;
    relatedObjectId?: string;
    relatedObjectType?: AssetRelatedObject;
    isPrivate?: boolean;
    metadata?: string | null;
    versions?: AssetVersionDto[] | null;
}

export class AssetDtoQueryResponse implements IAssetDtoQueryResponse {
    data?: AssetDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;

    constructor(data?: IAssetDtoQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(AssetDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.queryPayload = _data["queryPayload"] ? QueryPayload.fromJS(_data["queryPayload"]) : <any>null;
        }
    }

    static fromJS(data: any): AssetDtoQueryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AssetDtoQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["queryPayload"] = this.queryPayload ? this.queryPayload.toJSON() : this.queryPayload;
        return data;
    }
}

export interface IAssetDtoQueryResponse {
    data?: AssetDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;
}

export enum AssetRelatedObject {
    Consignment = "Consignment",
    Product = "Product",
    Message = "Message",
}

export class AssetVersionDto implements IAssetVersionDto {
    id?: string;
    assetId?: string;
    uploadDate?: Date;
    assetName?: string | null;
    assetBase64?: string | null;
    versionNumber?: number;

    constructor(data?: IAssetVersionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.assetId = _data["assetId"];
            this.uploadDate = _data["uploadDate"] ? new Date(_data["uploadDate"].toString()) : <any>null;
            this.assetName = _data["assetName"];
            this.assetBase64 = _data["assetBase64"];
            this.versionNumber = _data["versionNumber"];
        }
    }

    static fromJS(data: any): AssetVersionDto {
        data = typeof data === 'object' ? data : {};
        let result = new AssetVersionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["assetId"] = this.assetId;
        data["uploadDate"] = this.uploadDate && this.uploadDate.toISOString();
        data["assetName"] = this.assetName;
        data["assetBase64"] = this.assetBase64;
        data["versionNumber"] = this.versionNumber;
        return data;
    }
}

export interface IAssetVersionDto {
    id?: string;
    assetId?: string;
    uploadDate?: Date;
    assetName?: string | null;
    assetBase64?: string | null;
    versionNumber?: number;
}

export class AssociateLoginDto implements IAssociateLoginDto {
    companyId?: string;
    organizationId?: string;
    userId?: string;
    associateId?: string;

    constructor(data?: IAssociateLoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.companyId = _data["companyId"];
            this.organizationId = _data["organizationId"];
            this.userId = _data["userId"];
            this.associateId = _data["associateId"];
        }
    }

    static fromJS(data: any): AssociateLoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new AssociateLoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyId"] = this.companyId;
        data["organizationId"] = this.organizationId;
        data["userId"] = this.userId;
        data["associateId"] = this.associateId;
        return data;
    }
}

export interface IAssociateLoginDto {
    companyId?: string;
    organizationId?: string;
    userId?: string;
    associateId?: string;
}

export class AuthorizationProfileDto implements IAuthorizationProfileDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    name?: string | null;
    normalizedName?: string | null;
    description?: string | null;

    constructor(data?: IAuthorizationProfileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>null;
            this.createdBy = _data["createdBy"];
            this.updatedBy = _data["updatedBy"];
            this.name = _data["name"];
            this.normalizedName = _data["normalizedName"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): AuthorizationProfileDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorizationProfileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createDate"] = this.createDate && this.createDate.toISOString();
        data["updateDate"] = this.updateDate && this.updateDate.toISOString();
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["name"] = this.name;
        data["normalizedName"] = this.normalizedName;
        data["description"] = this.description;
        return data;
    }
}

export interface IAuthorizationProfileDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    name?: string | null;
    normalizedName?: string | null;
    description?: string | null;
}

export class AuthorizationProfileDtoQueryResponse implements IAuthorizationProfileDtoQueryResponse {
    data?: AuthorizationProfileDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;

    constructor(data?: IAuthorizationProfileDtoQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(AuthorizationProfileDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.queryPayload = _data["queryPayload"] ? QueryPayload.fromJS(_data["queryPayload"]) : <any>null;
        }
    }

    static fromJS(data: any): AuthorizationProfileDtoQueryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorizationProfileDtoQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["queryPayload"] = this.queryPayload ? this.queryPayload.toJSON() : this.queryPayload;
        return data;
    }
}

export interface IAuthorizationProfileDtoQueryResponse {
    data?: AuthorizationProfileDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;
}

export class BooleanActionResult implements IBooleanActionResult {
    result?: ActionResult;
    value?: boolean;

    constructor(data?: IBooleanActionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ActionResult.fromJS(_data["result"]) : <any>null;
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): BooleanActionResult {
        data = typeof data === 'object' ? data : {};
        let result = new BooleanActionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : this.result;
        data["value"] = this.value;
        return data;
    }
}

export interface IBooleanActionResult {
    result?: ActionResult;
    value?: boolean;
}

export enum ColumnFilterType {
    Text = "Text",
    DropDown = "DropDown",
}

export enum ColumnMode {
    ReadOnly = "ReadOnly",
    Editable = "Editable",
    Addable = "Addable",
    Both = "Both",
}

export class ColumnSetting implements IColumnSetting {
    keyName?: string | null;
    name?: string | null;
    title?: string | null;
    tableName?: string | null;
    isHTML?: boolean | null;
    translatable?: boolean | null;
    searchType?: boolean | null;
    visible?: boolean | null;
    width?: number | null;
    type?: ColumnSettingType;
    filterType?: ColumnFilterType;
    footerType?: FooterType;
    mode?: ColumnMode;
    jscriptOnChange?: string | null;
    inDetailsPopupColumn?: string | null;
    moduleId?: string | null;
    sqlStatementId?: string | null;
    filterSQLStatementId?: string | null;
    linkedModules?: string | null;

    constructor(data?: IColumnSetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.keyName = _data["keyName"];
            this.name = _data["name"];
            this.title = _data["title"];
            this.tableName = _data["tableName"];
            this.isHTML = _data["isHTML"];
            this.translatable = _data["translatable"];
            this.searchType = _data["searchType"];
            this.visible = _data["visible"];
            this.width = _data["width"];
            this.type = _data["type"];
            this.filterType = _data["filterType"];
            this.footerType = _data["footerType"];
            this.mode = _data["mode"];
            this.jscriptOnChange = _data["jscriptOnChange"];
            this.inDetailsPopupColumn = _data["inDetailsPopupColumn"];
            this.moduleId = _data["moduleId"];
            this.sqlStatementId = _data["sqlStatementId"];
            this.filterSQLStatementId = _data["filterSQLStatementId"];
            this.linkedModules = _data["linkedModules"];
        }
    }

    static fromJS(data: any): ColumnSetting {
        data = typeof data === 'object' ? data : {};
        let result = new ColumnSetting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["keyName"] = this.keyName;
        data["name"] = this.name;
        data["title"] = this.title;
        data["tableName"] = this.tableName;
        data["isHTML"] = this.isHTML;
        data["translatable"] = this.translatable;
        data["searchType"] = this.searchType;
        data["visible"] = this.visible;
        data["width"] = this.width;
        data["type"] = this.type;
        data["filterType"] = this.filterType;
        data["footerType"] = this.footerType;
        data["mode"] = this.mode;
        data["jscriptOnChange"] = this.jscriptOnChange;
        data["inDetailsPopupColumn"] = this.inDetailsPopupColumn;
        data["moduleId"] = this.moduleId;
        data["sqlStatementId"] = this.sqlStatementId;
        data["filterSQLStatementId"] = this.filterSQLStatementId;
        data["linkedModules"] = this.linkedModules;
        return data;
    }
}

export interface IColumnSetting {
    keyName?: string | null;
    name?: string | null;
    title?: string | null;
    tableName?: string | null;
    isHTML?: boolean | null;
    translatable?: boolean | null;
    searchType?: boolean | null;
    visible?: boolean | null;
    width?: number | null;
    type?: ColumnSettingType;
    filterType?: ColumnFilterType;
    footerType?: FooterType;
    mode?: ColumnMode;
    jscriptOnChange?: string | null;
    inDetailsPopupColumn?: string | null;
    moduleId?: string | null;
    sqlStatementId?: string | null;
    filterSQLStatementId?: string | null;
    linkedModules?: string | null;
}

export enum ColumnSettingType {
    Label = "Label",
    Date = "Date",
    Price = "Price",
    Amount = "Amount",
    CheckBox = "CheckBox",
    Hidden = "Hidden",
    DropdownList = "DropdownList",
    RichText = "RichText",
    RadioButton = "RadioButton",
    Image = "Image",
    CartQuantity = "CartQuantity",
    Link = "Link",
    Discount = "Discount",
    SelectionCheckBox = "SelectionCheckBox",
    Icon = "Icon",
    Number = "Number",
}

export class CompanyDto implements ICompanyDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    seriesId?: string | null;
    seriesNumber?: string | null;
    type?: CompanyType;
    code?: string | null;
    name?: string | null;
    email?: string | null;
    phone?: string | null;
    fax?: string | null;
    notes?: string | null;
    defaultShippingAddressId?: string | null;
    defaultShippingAddress?: AddressDto;
    defaultBillingAddressId?: string | null;
    defaultBillingAddress?: AddressDto;
    defaultContactId?: string | null;
    defaultContact?: ContactDto;
    priceListId?: string | null;
    companySegmentId?: string | null;
    addresses?: AddressDto[] | null;
    contacts?: ContactDto[] | null;
    currencyId?: string | null;
    currency?: CurrencyDto;

    constructor(data?: ICompanyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>null;
            this.createdBy = _data["createdBy"];
            this.updatedBy = _data["updatedBy"];
            this.seriesId = _data["seriesId"];
            this.seriesNumber = _data["seriesNumber"];
            this.type = _data["type"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.fax = _data["fax"];
            this.notes = _data["notes"];
            this.defaultShippingAddressId = _data["defaultShippingAddressId"];
            this.defaultShippingAddress = _data["defaultShippingAddress"] ? AddressDto.fromJS(_data["defaultShippingAddress"]) : <any>null;
            this.defaultBillingAddressId = _data["defaultBillingAddressId"];
            this.defaultBillingAddress = _data["defaultBillingAddress"] ? AddressDto.fromJS(_data["defaultBillingAddress"]) : <any>null;
            this.defaultContactId = _data["defaultContactId"];
            this.defaultContact = _data["defaultContact"] ? ContactDto.fromJS(_data["defaultContact"]) : <any>null;
            this.priceListId = _data["priceListId"];
            this.companySegmentId = _data["companySegmentId"];
            if (Array.isArray(_data["addresses"])) {
                this.addresses = [] as any;
                for (let item of _data["addresses"])
                    this.addresses!.push(AddressDto.fromJS(item));
            }
            if (Array.isArray(_data["contacts"])) {
                this.contacts = [] as any;
                for (let item of _data["contacts"])
                    this.contacts!.push(ContactDto.fromJS(item));
            }
            this.currencyId = _data["currencyId"];
            this.currency = _data["currency"] ? CurrencyDto.fromJS(_data["currency"]) : <any>null;
        }
    }

    static fromJS(data: any): CompanyDto {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createDate"] = this.createDate && this.createDate.toISOString();
        data["updateDate"] = this.updateDate && this.updateDate.toISOString();
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["seriesId"] = this.seriesId;
        data["seriesNumber"] = this.seriesNumber;
        data["type"] = this.type;
        data["code"] = this.code;
        data["name"] = this.name;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["fax"] = this.fax;
        data["notes"] = this.notes;
        data["defaultShippingAddressId"] = this.defaultShippingAddressId;
        data["defaultShippingAddress"] = this.defaultShippingAddress ? this.defaultShippingAddress.toJSON() : this.defaultShippingAddress;
        data["defaultBillingAddressId"] = this.defaultBillingAddressId;
        data["defaultBillingAddress"] = this.defaultBillingAddress ? this.defaultBillingAddress.toJSON() : this.defaultBillingAddress;
        data["defaultContactId"] = this.defaultContactId;
        data["defaultContact"] = this.defaultContact ? this.defaultContact.toJSON() : this.defaultContact;
        data["priceListId"] = this.priceListId;
        data["companySegmentId"] = this.companySegmentId;
        if (Array.isArray(this.addresses)) {
            data["addresses"] = [];
            for (let item of this.addresses)
                data["addresses"].push(item.toJSON());
        }
        if (Array.isArray(this.contacts)) {
            data["contacts"] = [];
            for (let item of this.contacts)
                data["contacts"].push(item.toJSON());
        }
        data["currencyId"] = this.currencyId;
        data["currency"] = this.currency ? this.currency.toJSON() : this.currency;
        return data;
    }
}

export interface ICompanyDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    seriesId?: string | null;
    seriesNumber?: string | null;
    type?: CompanyType;
    code?: string | null;
    name?: string | null;
    email?: string | null;
    phone?: string | null;
    fax?: string | null;
    notes?: string | null;
    defaultShippingAddressId?: string | null;
    defaultShippingAddress?: AddressDto;
    defaultBillingAddressId?: string | null;
    defaultBillingAddress?: AddressDto;
    defaultContactId?: string | null;
    defaultContact?: ContactDto;
    priceListId?: string | null;
    companySegmentId?: string | null;
    addresses?: AddressDto[] | null;
    contacts?: ContactDto[] | null;
    currencyId?: string | null;
    currency?: CurrencyDto;
}

export class CompanyDtoQueryResponse implements ICompanyDtoQueryResponse {
    data?: CompanyDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;

    constructor(data?: ICompanyDtoQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CompanyDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.queryPayload = _data["queryPayload"] ? QueryPayload.fromJS(_data["queryPayload"]) : <any>null;
        }
    }

    static fromJS(data: any): CompanyDtoQueryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyDtoQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["queryPayload"] = this.queryPayload ? this.queryPayload.toJSON() : this.queryPayload;
        return data;
    }
}

export interface ICompanyDtoQueryResponse {
    data?: CompanyDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;
}

export enum CompanyType {
    Customer = "Customer",
    Vendor = "Vendor",
}

export enum ComparisonOperator {
    Equals = "Equals",
    GreaterThan = "GreaterThan",
    LessThan = "LessThan",
    NotEquals = "NotEquals",
    Contains = "Contains",
    StartsWith = "StartsWith",
    EndsWith = "EndsWith",
    In = "In",
    NotIn = "NotIn",
    GreaterThanOrEqual = "GreaterThanOrEqual",
    LessThanOrEqual = "LessThanOrEqual",
}

export class ConfigurationDto implements IConfigurationDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    app!: string | null;
    fullPath?: string | null;
    scope?: ScopeType;
    area?: AreaType;
    configurationLines!: ConfigurationLineDto[] | null;

    constructor(data?: IConfigurationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>null;
            this.createdBy = _data["createdBy"];
            this.updatedBy = _data["updatedBy"];
            this.app = _data["app"];
            this.fullPath = _data["fullPath"];
            this.scope = _data["scope"];
            this.area = _data["area"];
            if (Array.isArray(_data["configurationLines"])) {
                this.configurationLines = [] as any;
                for (let item of _data["configurationLines"])
                    this.configurationLines!.push(ConfigurationLineDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConfigurationDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConfigurationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createDate"] = this.createDate && this.createDate.toISOString();
        data["updateDate"] = this.updateDate && this.updateDate.toISOString();
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["app"] = this.app;
        data["fullPath"] = this.fullPath;
        data["scope"] = this.scope;
        data["area"] = this.area;
        if (Array.isArray(this.configurationLines)) {
            data["configurationLines"] = [];
            for (let item of this.configurationLines)
                data["configurationLines"].push(item.toJSON());
        }
        return data;
    }
}

export interface IConfigurationDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    app: string | null;
    fullPath?: string | null;
    scope?: ScopeType;
    area?: AreaType;
    configurationLines: ConfigurationLineDto[] | null;
}

export class ConfigurationDtoQueryResponse implements IConfigurationDtoQueryResponse {
    data?: ConfigurationDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;

    constructor(data?: IConfigurationDtoQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ConfigurationDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.queryPayload = _data["queryPayload"] ? QueryPayload.fromJS(_data["queryPayload"]) : <any>null;
        }
    }

    static fromJS(data: any): ConfigurationDtoQueryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ConfigurationDtoQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["queryPayload"] = this.queryPayload ? this.queryPayload.toJSON() : this.queryPayload;
        return data;
    }
}

export interface IConfigurationDtoQueryResponse {
    data?: ConfigurationDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;
}

export class ConfigurationLineDto implements IConfigurationLineDto {
    id?: string;
    configurationHeaderId?: string;
    scope?: ScopeType;
    area?: AreaType;
    key?: string | null;
    value?: string | null;

    constructor(data?: IConfigurationLineDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.configurationHeaderId = _data["configurationHeaderId"];
            this.scope = _data["scope"];
            this.area = _data["area"];
            this.key = _data["key"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ConfigurationLineDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConfigurationLineDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["configurationHeaderId"] = this.configurationHeaderId;
        data["scope"] = this.scope;
        data["area"] = this.area;
        data["key"] = this.key;
        data["value"] = this.value;
        return data;
    }
}

export interface IConfigurationLineDto {
    id?: string;
    configurationHeaderId?: string;
    scope?: ScopeType;
    area?: AreaType;
    key?: string | null;
    value?: string | null;
}

export class ConsignmentDto implements IConsignmentDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    seriesNumber?: string | null;
    seriesId?: string | null;
    documentType?: DocumentType;
    documentId?: string | null;
    documentNumber?: string | null;
    dueDate?: Date;
    status?: ConsignmentStatus;
    address?: string | null;
    email?: string | null;
    phoneNumber?: string | null;
    customerName?: string | null;
    latitude?: number | null;
    longitude?: number | null;
    isValidAddress?: boolean;
    routeId?: string | null;
    warehouseId?: string;
    warehouse?: WarehouseDto;
    history?: ConsignmentHistoryDto[] | null;
    assets?: AssetDto[] | null;
    hasAssets?: boolean;

    constructor(data?: IConsignmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>null;
            this.createdBy = _data["createdBy"];
            this.updatedBy = _data["updatedBy"];
            this.seriesNumber = _data["seriesNumber"];
            this.seriesId = _data["seriesId"];
            this.documentType = _data["documentType"];
            this.documentId = _data["documentId"];
            this.documentNumber = _data["documentNumber"];
            this.dueDate = _data["dueDate"] ? new Date(_data["dueDate"].toString()) : <any>null;
            this.status = _data["status"];
            this.address = _data["address"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.customerName = _data["customerName"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.isValidAddress = _data["isValidAddress"];
            this.routeId = _data["routeId"];
            this.warehouseId = _data["warehouseId"];
            this.warehouse = _data["warehouse"] ? WarehouseDto.fromJS(_data["warehouse"]) : <any>null;
            if (Array.isArray(_data["history"])) {
                this.history = [] as any;
                for (let item of _data["history"])
                    this.history!.push(ConsignmentHistoryDto.fromJS(item));
            }
            if (Array.isArray(_data["assets"])) {
                this.assets = [] as any;
                for (let item of _data["assets"])
                    this.assets!.push(AssetDto.fromJS(item));
            }
            this.hasAssets = _data["hasAssets"];
        }
    }

    static fromJS(data: any): ConsignmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConsignmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createDate"] = this.createDate && this.createDate.toISOString();
        data["updateDate"] = this.updateDate && this.updateDate.toISOString();
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["seriesNumber"] = this.seriesNumber;
        data["seriesId"] = this.seriesId;
        data["documentType"] = this.documentType;
        data["documentId"] = this.documentId;
        data["documentNumber"] = this.documentNumber;
        data["dueDate"] = this.dueDate && this.dueDate.toISOString();
        data["status"] = this.status;
        data["address"] = this.address;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["customerName"] = this.customerName;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["isValidAddress"] = this.isValidAddress;
        data["routeId"] = this.routeId;
        data["warehouseId"] = this.warehouseId;
        data["warehouse"] = this.warehouse ? this.warehouse.toJSON() : this.warehouse;
        if (Array.isArray(this.history)) {
            data["history"] = [];
            for (let item of this.history)
                data["history"].push(item.toJSON());
        }
        if (Array.isArray(this.assets)) {
            data["assets"] = [];
            for (let item of this.assets)
                data["assets"].push(item.toJSON());
        }
        data["hasAssets"] = this.hasAssets;
        return data;
    }
}

export interface IConsignmentDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    seriesNumber?: string | null;
    seriesId?: string | null;
    documentType?: DocumentType;
    documentId?: string | null;
    documentNumber?: string | null;
    dueDate?: Date;
    status?: ConsignmentStatus;
    address?: string | null;
    email?: string | null;
    phoneNumber?: string | null;
    customerName?: string | null;
    latitude?: number | null;
    longitude?: number | null;
    isValidAddress?: boolean;
    routeId?: string | null;
    warehouseId?: string;
    warehouse?: WarehouseDto;
    history?: ConsignmentHistoryDto[] | null;
    assets?: AssetDto[] | null;
    hasAssets?: boolean;
}

export class ConsignmentDtoQueryResponse implements IConsignmentDtoQueryResponse {
    data?: ConsignmentDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;

    constructor(data?: IConsignmentDtoQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ConsignmentDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.queryPayload = _data["queryPayload"] ? QueryPayload.fromJS(_data["queryPayload"]) : <any>null;
        }
    }

    static fromJS(data: any): ConsignmentDtoQueryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ConsignmentDtoQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["queryPayload"] = this.queryPayload ? this.queryPayload.toJSON() : this.queryPayload;
        return data;
    }
}

export interface IConsignmentDtoQueryResponse {
    data?: ConsignmentDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;
}

export class ConsignmentHistoryDto implements IConsignmentHistoryDto {
    entryDate?: Date;
    status?: ConsignmentStatus;
    failureReasonId?: string | null;
    failureReason?: FailureReasonDto;

    constructor(data?: IConsignmentHistoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.entryDate = _data["entryDate"] ? new Date(_data["entryDate"].toString()) : <any>null;
            this.status = _data["status"];
            this.failureReasonId = _data["failureReasonId"];
            this.failureReason = _data["failureReason"] ? FailureReasonDto.fromJS(_data["failureReason"]) : <any>null;
        }
    }

    static fromJS(data: any): ConsignmentHistoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConsignmentHistoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entryDate"] = this.entryDate && this.entryDate.toISOString();
        data["status"] = this.status;
        data["failureReasonId"] = this.failureReasonId;
        data["failureReason"] = this.failureReason ? this.failureReason.toJSON() : this.failureReason;
        return data;
    }
}

export interface IConsignmentHistoryDto {
    entryDate?: Date;
    status?: ConsignmentStatus;
    failureReasonId?: string | null;
    failureReason?: FailureReasonDto;
}

export enum ConsignmentStatus {
    Pending = "Pending",
    Planned = "Planned",
    OutForDelivery = "OutForDelivery",
    Delivered = "Delivered",
    Failed = "Failed",
}

export class ConsignmentStatusUpdateDto implements IConsignmentStatusUpdateDto {
    status?: ConsignmentStatus;
    reasonId?: string | null;

    constructor(data?: IConsignmentStatusUpdateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"];
            this.reasonId = _data["reasonId"];
        }
    }

    static fromJS(data: any): ConsignmentStatusUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConsignmentStatusUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["reasonId"] = this.reasonId;
        return data;
    }
}

export interface IConsignmentStatusUpdateDto {
    status?: ConsignmentStatus;
    reasonId?: string | null;
}

export class ContactDto implements IContactDto {
    id?: string;
    companyId?: string;
    position?: string | null;
    tel?: string | null;
    cellolar?: string | null;
    fax?: string | null;
    email?: string | null;
    notes?: string | null;
    title?: string | null;
    firstName?: string | null;
    middleName?: string | null;
    lastName?: string | null;
    associateId?: string | null;

    constructor(data?: IContactDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.companyId = _data["companyId"];
            this.position = _data["position"];
            this.tel = _data["tel"];
            this.cellolar = _data["cellolar"];
            this.fax = _data["fax"];
            this.email = _data["email"];
            this.notes = _data["notes"];
            this.title = _data["title"];
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.lastName = _data["lastName"];
            this.associateId = _data["associateId"];
        }
    }

    static fromJS(data: any): ContactDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContactDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["companyId"] = this.companyId;
        data["position"] = this.position;
        data["tel"] = this.tel;
        data["cellolar"] = this.cellolar;
        data["fax"] = this.fax;
        data["email"] = this.email;
        data["notes"] = this.notes;
        data["title"] = this.title;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["lastName"] = this.lastName;
        data["associateId"] = this.associateId;
        return data;
    }
}

export interface IContactDto {
    id?: string;
    companyId?: string;
    position?: string | null;
    tel?: string | null;
    cellolar?: string | null;
    fax?: string | null;
    email?: string | null;
    notes?: string | null;
    title?: string | null;
    firstName?: string | null;
    middleName?: string | null;
    lastName?: string | null;
    associateId?: string | null;
}

export class CountryDto implements ICountryDto {
    id?: string | null;
    name?: string | null;
    code?: string | null;

    constructor(data?: ICountryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CountryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CountryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        return data;
    }
}

export interface ICountryDto {
    id?: string | null;
    name?: string | null;
    code?: string | null;
}

export class CurrencyDto implements ICurrencyDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    name?: string | null;
    symbol?: string | null;
    isoCode?: string | null;
    decimalPlaces?: number;

    constructor(data?: ICurrencyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>null;
            this.createdBy = _data["createdBy"];
            this.updatedBy = _data["updatedBy"];
            this.name = _data["name"];
            this.symbol = _data["symbol"];
            this.isoCode = _data["isoCode"];
            this.decimalPlaces = _data["decimalPlaces"];
        }
    }

    static fromJS(data: any): CurrencyDto {
        data = typeof data === 'object' ? data : {};
        let result = new CurrencyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createDate"] = this.createDate && this.createDate.toISOString();
        data["updateDate"] = this.updateDate && this.updateDate.toISOString();
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["name"] = this.name;
        data["symbol"] = this.symbol;
        data["isoCode"] = this.isoCode;
        data["decimalPlaces"] = this.decimalPlaces;
        return data;
    }
}

export interface ICurrencyDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    name?: string | null;
    symbol?: string | null;
    isoCode?: string | null;
    decimalPlaces?: number;
}

export class DashboardDto implements IDashboardDto {
    id?: string;
    localizations?: string | null;
    areas?: string | null;
    isSystem?: boolean;
    organizationId?: string;
    roles?: string | null;
    title?: string | null;
    dashboardInfo?: string | null;
    dashboardParameters?: string | null;
    dashboardStructure?: string | null;
    dashboardInfoParsed?: DashboardInfo[] | null;
    dashboardParametersParsed?: DashboardParameter[] | null;

    constructor(data?: IDashboardDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.localizations = _data["localizations"];
            this.areas = _data["areas"];
            this.isSystem = _data["isSystem"];
            this.organizationId = _data["organizationId"];
            this.roles = _data["roles"];
            this.title = _data["title"];
            this.dashboardInfo = _data["dashboardInfo"];
            this.dashboardParameters = _data["dashboardParameters"];
            this.dashboardStructure = _data["dashboardStructure"];
            if (Array.isArray(_data["dashboardInfoParsed"])) {
                this.dashboardInfoParsed = [] as any;
                for (let item of _data["dashboardInfoParsed"])
                    this.dashboardInfoParsed!.push(DashboardInfo.fromJS(item));
            }
            if (Array.isArray(_data["dashboardParametersParsed"])) {
                this.dashboardParametersParsed = [] as any;
                for (let item of _data["dashboardParametersParsed"])
                    this.dashboardParametersParsed!.push(DashboardParameter.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DashboardDto {
        data = typeof data === 'object' ? data : {};
        let result = new DashboardDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["localizations"] = this.localizations;
        data["areas"] = this.areas;
        data["isSystem"] = this.isSystem;
        data["organizationId"] = this.organizationId;
        data["roles"] = this.roles;
        data["title"] = this.title;
        data["dashboardInfo"] = this.dashboardInfo;
        data["dashboardParameters"] = this.dashboardParameters;
        data["dashboardStructure"] = this.dashboardStructure;
        if (Array.isArray(this.dashboardInfoParsed)) {
            data["dashboardInfoParsed"] = [];
            for (let item of this.dashboardInfoParsed)
                data["dashboardInfoParsed"].push(item.toJSON());
        }
        if (Array.isArray(this.dashboardParametersParsed)) {
            data["dashboardParametersParsed"] = [];
            for (let item of this.dashboardParametersParsed)
                data["dashboardParametersParsed"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDashboardDto {
    id?: string;
    localizations?: string | null;
    areas?: string | null;
    isSystem?: boolean;
    organizationId?: string;
    roles?: string | null;
    title?: string | null;
    dashboardInfo?: string | null;
    dashboardParameters?: string | null;
    dashboardStructure?: string | null;
    dashboardInfoParsed?: DashboardInfo[] | null;
    dashboardParametersParsed?: DashboardParameter[] | null;
}

export class DashboardInfo implements IDashboardInfo {
    tagName?: string | null;
    className?: string | null;
    controller?: string | null;
    action?: string | null;
    sort?: number;
    type?: DashboardObjectType;
    parameters?: string | null;

    constructor(data?: IDashboardInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tagName = _data["tagName"];
            this.className = _data["className"];
            this.controller = _data["controller"];
            this.action = _data["action"];
            this.sort = _data["sort"];
            this.type = _data["type"];
            this.parameters = _data["parameters"];
        }
    }

    static fromJS(data: any): DashboardInfo {
        data = typeof data === 'object' ? data : {};
        let result = new DashboardInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tagName"] = this.tagName;
        data["className"] = this.className;
        data["controller"] = this.controller;
        data["action"] = this.action;
        data["sort"] = this.sort;
        data["type"] = this.type;
        data["parameters"] = this.parameters;
        return data;
    }
}

export interface IDashboardInfo {
    tagName?: string | null;
    className?: string | null;
    controller?: string | null;
    action?: string | null;
    sort?: number;
    type?: DashboardObjectType;
    parameters?: string | null;
}

export enum DashboardObjectType {
    Widget = "Widget",
    Calender = "Calender",
    Table = "Table",
    ParameterSet = "ParameterSet",
    Text = "Text",
    Button = "Button",
    PlainWidget = "PlainWidget",
    ParameterSetHorizontal = "ParameterSetHorizontal",
}

export class DashboardParameter implements IDashboardParameter {
    name?: string | null;
    parameterSet?: string | null;
    label?: string | null;
    sort?: number;
    required?: boolean;
    sqlStatementId?: string | null;
    dropdownListStyle?: DropdownListStyle;
    type?: ColumnSettingType;
    value?: string | null;

    constructor(data?: IDashboardParameter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.parameterSet = _data["parameterSet"];
            this.label = _data["label"];
            this.sort = _data["sort"];
            this.required = _data["required"];
            this.sqlStatementId = _data["sqlStatementId"];
            this.dropdownListStyle = _data["dropdownListStyle"];
            this.type = _data["type"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): DashboardParameter {
        data = typeof data === 'object' ? data : {};
        let result = new DashboardParameter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["parameterSet"] = this.parameterSet;
        data["label"] = this.label;
        data["sort"] = this.sort;
        data["required"] = this.required;
        data["sqlStatementId"] = this.sqlStatementId;
        data["dropdownListStyle"] = this.dropdownListStyle;
        data["type"] = this.type;
        data["value"] = this.value;
        return data;
    }
}

export interface IDashboardParameter {
    name?: string | null;
    parameterSet?: string | null;
    label?: string | null;
    sort?: number;
    required?: boolean;
    sqlStatementId?: string | null;
    dropdownListStyle?: DropdownListStyle;
    type?: ColumnSettingType;
    value?: string | null;
}

export class DataSourceDto implements IDataSourceDto {
    id?: string;
    localizations?: string | null;
    areas?: string | null;
    isSystem?: boolean;
    organizationId?: string;
    name?: string | null;
    keyFieldName?: string | null;
    filterExpression?: string | null;
    dataSourceEndpoint?: string | null;

    constructor(data?: IDataSourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.localizations = _data["localizations"];
            this.areas = _data["areas"];
            this.isSystem = _data["isSystem"];
            this.organizationId = _data["organizationId"];
            this.name = _data["name"];
            this.keyFieldName = _data["keyFieldName"];
            this.filterExpression = _data["filterExpression"];
            this.dataSourceEndpoint = _data["dataSourceEndpoint"];
        }
    }

    static fromJS(data: any): DataSourceDto {
        data = typeof data === 'object' ? data : {};
        let result = new DataSourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["localizations"] = this.localizations;
        data["areas"] = this.areas;
        data["isSystem"] = this.isSystem;
        data["organizationId"] = this.organizationId;
        data["name"] = this.name;
        data["keyFieldName"] = this.keyFieldName;
        data["filterExpression"] = this.filterExpression;
        data["dataSourceEndpoint"] = this.dataSourceEndpoint;
        return data;
    }
}

export interface IDataSourceDto {
    id?: string;
    localizations?: string | null;
    areas?: string | null;
    isSystem?: boolean;
    organizationId?: string;
    name?: string | null;
    keyFieldName?: string | null;
    filterExpression?: string | null;
    dataSourceEndpoint?: string | null;
}

export enum DocumentType {
    Delivery = "Delivery",
    Order = "Order",
    Quotation = "Quotation",
}

export class DriverHistoryDto implements IDriverHistoryDto {
    id?: string;
    entryDate?: Date | null;
    latitude?: number | null;
    longitude?: number | null;
    employeeId?: string;
    routeId?: string;
    vehicleId?: string;

    constructor(data?: IDriverHistoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.entryDate = _data["entryDate"] ? new Date(_data["entryDate"].toString()) : <any>null;
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.employeeId = _data["employeeId"];
            this.routeId = _data["routeId"];
            this.vehicleId = _data["vehicleId"];
        }
    }

    static fromJS(data: any): DriverHistoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new DriverHistoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["entryDate"] = this.entryDate && this.entryDate.toISOString();
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["employeeId"] = this.employeeId;
        data["routeId"] = this.routeId;
        data["vehicleId"] = this.vehicleId;
        return data;
    }
}

export interface IDriverHistoryDto {
    id?: string;
    entryDate?: Date | null;
    latitude?: number | null;
    longitude?: number | null;
    employeeId?: string;
    routeId?: string;
    vehicleId?: string;
}

export enum DropdownListStyle {
    None = "None",
    Searchable = "Searchable",
    MultiSelection = "MultiSelection",
    BOTH = "BOTH",
}

export class EmployeeDto implements IEmployeeDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    firstName?: string | null;
    middleName?: string | null;
    lastName?: string | null;
    email?: string | null;
    contactEmail?: string | null;
    phoneNumber?: string | null;
    position?: string | null;
    authorizationProfileId?: string;
    authorizationProfile?: AuthorizationProfileDto;
    isDriver?: boolean;
    isDeleted?: boolean;

    constructor(data?: IEmployeeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>null;
            this.createdBy = _data["createdBy"];
            this.updatedBy = _data["updatedBy"];
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.contactEmail = _data["contactEmail"];
            this.phoneNumber = _data["phoneNumber"];
            this.position = _data["position"];
            this.authorizationProfileId = _data["authorizationProfileId"];
            this.authorizationProfile = _data["authorizationProfile"] ? AuthorizationProfileDto.fromJS(_data["authorizationProfile"]) : <any>null;
            this.isDriver = _data["isDriver"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): EmployeeDto {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createDate"] = this.createDate && this.createDate.toISOString();
        data["updateDate"] = this.updateDate && this.updateDate.toISOString();
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["contactEmail"] = this.contactEmail;
        data["phoneNumber"] = this.phoneNumber;
        data["position"] = this.position;
        data["authorizationProfileId"] = this.authorizationProfileId;
        data["authorizationProfile"] = this.authorizationProfile ? this.authorizationProfile.toJSON() : this.authorizationProfile;
        data["isDriver"] = this.isDriver;
        data["isDeleted"] = this.isDeleted;
        return data;
    }
}

export interface IEmployeeDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    firstName?: string | null;
    middleName?: string | null;
    lastName?: string | null;
    email?: string | null;
    contactEmail?: string | null;
    phoneNumber?: string | null;
    position?: string | null;
    authorizationProfileId?: string;
    authorizationProfile?: AuthorizationProfileDto;
    isDriver?: boolean;
    isDeleted?: boolean;
}

export class EmployeeDtoQueryResponse implements IEmployeeDtoQueryResponse {
    data?: EmployeeDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;

    constructor(data?: IEmployeeDtoQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(EmployeeDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.queryPayload = _data["queryPayload"] ? QueryPayload.fromJS(_data["queryPayload"]) : <any>null;
        }
    }

    static fromJS(data: any): EmployeeDtoQueryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeDtoQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["queryPayload"] = this.queryPayload ? this.queryPayload.toJSON() : this.queryPayload;
        return data;
    }
}

export interface IEmployeeDtoQueryResponse {
    data?: EmployeeDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;
}

export class EmployeeInvitationRequestDto implements IEmployeeInvitationRequestDto {
    email!: string;
    firstName!: string;
    middleName?: string | null;
    lastName!: string;
    authorizationProfileId!: string;
    isDriver?: boolean;

    constructor(data?: IEmployeeInvitationRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.lastName = _data["lastName"];
            this.authorizationProfileId = _data["authorizationProfileId"];
            this.isDriver = _data["isDriver"];
        }
    }

    static fromJS(data: any): EmployeeInvitationRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeInvitationRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["lastName"] = this.lastName;
        data["authorizationProfileId"] = this.authorizationProfileId;
        data["isDriver"] = this.isDriver;
        return data;
    }
}

export interface IEmployeeInvitationRequestDto {
    email: string;
    firstName: string;
    middleName?: string | null;
    lastName: string;
    authorizationProfileId: string;
    isDriver?: boolean;
}

export enum EntityType {
    None = "None",
    CompanyCustomer = "CompanyCustomer",
    ComapnyVendor = "ComapnyVendor",
    Warehouse = "Warehouse",
    Quotation = "Quotation",
    Order = "Order",
    Delivery = "Delivery",
    Invoice = "Invoice",
    Return = "Return",
    Product = "Product",
    Consignment = "Consignment",
    Route = "Route",
    SubscriptionProduct = "SubscriptionProduct",
    SubscriptionContract = "SubscriptionContract",
    SubscriptionDelivery = "SubscriptionDelivery",
    SubscriptionReturn = "SubscriptionReturn",
}

export class FailureReasonDto implements IFailureReasonDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    title?: string | null;
    description?: string | null;
    attachmentRequired?: boolean;

    constructor(data?: IFailureReasonDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>null;
            this.createdBy = _data["createdBy"];
            this.updatedBy = _data["updatedBy"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.attachmentRequired = _data["attachmentRequired"];
        }
    }

    static fromJS(data: any): FailureReasonDto {
        data = typeof data === 'object' ? data : {};
        let result = new FailureReasonDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createDate"] = this.createDate && this.createDate.toISOString();
        data["updateDate"] = this.updateDate && this.updateDate.toISOString();
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["title"] = this.title;
        data["description"] = this.description;
        data["attachmentRequired"] = this.attachmentRequired;
        return data;
    }
}

export interface IFailureReasonDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    title?: string | null;
    description?: string | null;
    attachmentRequired?: boolean;
}

export class FailureReasonDtoQueryResponse implements IFailureReasonDtoQueryResponse {
    data?: FailureReasonDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;

    constructor(data?: IFailureReasonDtoQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(FailureReasonDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.queryPayload = _data["queryPayload"] ? QueryPayload.fromJS(_data["queryPayload"]) : <any>null;
        }
    }

    static fromJS(data: any): FailureReasonDtoQueryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new FailureReasonDtoQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["queryPayload"] = this.queryPayload ? this.queryPayload.toJSON() : this.queryPayload;
        return data;
    }
}

export interface IFailureReasonDtoQueryResponse {
    data?: FailureReasonDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;
}

export class FieldAddtionalInformation implements IFieldAddtionalInformation {
    isPassword?: boolean;
    dataLabel?: string | null;
    valueYes?: string | null;
    valueNo?: string | null;
    dbValueYes?: string | null;
    dbValueNo?: string | null;
    width?: number;
    properties?: string[] | null;
    isSelect2?: boolean;
    isMultiple?: boolean;
    selectOptionsAsCards?: boolean;
    labelOnRight?: boolean;
    visible?: boolean;
    linkedFieldInQuery?: string | null;
    linkedFieldMinValueToolTip?: string | null;
    linkedFieldMaxValueToolTip?: string | null;
    linkedFieldInMinValue?: string | null;
    linkedFieldInMaxValue?: string | null;
    linkedFieldInReadonly?: string | null;
    linkedFieldInRequired?: string | null;
    linkedFieldInVisible?: string | null;
    sortOrderInDialog?: number | null;
    groupInDialog?: string | null;
    groupInDialogTitle?: string | null;
    selectionCriteriaNumber?: number | null;
    selectionCriteriaLinkedField?: string | null;
    multipleDate?: string | null;
    visibleInDialog?: boolean;
    visibleInTableList?: boolean;
    displayTotalsInList?: boolean;
    totalsInListType?: TotalsInListType;
    fixedInTableType?: FixedType;
    filterDefaultValue?: string | null;
    affectFormMode?: boolean;
    labelClass?: string | null;
    expressionInFilterList?: string | null;
    expressionInFilterListHana?: string | null;
    editableInList?: boolean;
    secondaryId?: boolean;
    sendToMobileApp?: boolean;
    nameInAPI?: string | null;
    useConditionsInAutoComplete?: boolean;
    icon?: string | null;
    labelVisible?: boolean;
    showEye?: boolean;
    bigAddButton?: boolean;
    searchButton?: string | null;
    addButtonText?: string | null;
    fieldClassName?: string | null;
    addButtonIcon?: string | null;
    showOutsideLines?: boolean;
    showOutsideLines_CurrentInTable?: boolean;
    showInAutoCompleteList?: boolean;
    isLabelATextArea?: boolean;
    textAreaRows?: number;
    disableCurrency?: boolean;
    functionToExecute?: string | null;
    customLabel?: string | null;
    createNewInside?: boolean;
    widthInList?: number;
    sapfsControl?: string | null;
    isDatePickerMonthMode?: boolean;
    monthModeBeginOfMonth?: boolean;
    monthModeEndOfMonth?: boolean;
    optionsToBeTranslated?: boolean;
    isImage?: boolean;
    allowUploadFile?: boolean;
    allowSignature?: boolean;
    allowUsingCamera?: boolean;
    calendarInToolTipOnly?: boolean;
    dataSourcePath?: string | null;
    visibleInDialogOnly?: boolean;
    itemCodePropertyPropertyName?: string | null;
    itemDescriptionPropertyName?: string | null;
    itmSerialNumberPropertyName?: string | null;
    unitOfMeasurmentPropertyName?: string | null;
    uomEntryPropertyName?: string | null;
    warehouseCodePropertyName?: string | null;
    openQuantityPropertyName?: string | null;
    warningMessageEnabled?: boolean;
    warningMessageText?: string | null;
    warningRegex?: string | null;
    warningRegexCondition?: WarningRegexCondition;
    innerHTML?: string | null;
    showOnTop?: boolean;
    executeParentChangeOnLoad?: boolean;
    nav_Condition?: string | null;
    propertyCode?: string | null;
    isProperty?: boolean;
    tag?: string | null;
    sort?: string | null;
    parent?: string | null;
    enableSearch?: boolean;
    uniqueDefaultValue?: boolean;
    disabledDatesSQLStatementId?: number;
    allowedDatesRangeSQLStatementId?: number;

    constructor(data?: IFieldAddtionalInformation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isPassword = _data["isPassword"];
            this.dataLabel = _data["dataLabel"];
            this.valueYes = _data["valueYes"];
            this.valueNo = _data["valueNo"];
            this.dbValueYes = _data["dbValueYes"];
            this.dbValueNo = _data["dbValueNo"];
            this.width = _data["width"];
            if (Array.isArray(_data["properties"])) {
                this.properties = [] as any;
                for (let item of _data["properties"])
                    this.properties!.push(item);
            }
            this.isSelect2 = _data["isSelect2"];
            this.isMultiple = _data["isMultiple"];
            this.selectOptionsAsCards = _data["selectOptionsAsCards"];
            this.labelOnRight = _data["labelOnRight"];
            this.visible = _data["visible"];
            this.linkedFieldInQuery = _data["linkedFieldInQuery"];
            this.linkedFieldMinValueToolTip = _data["linkedFieldMinValueToolTip"];
            this.linkedFieldMaxValueToolTip = _data["linkedFieldMaxValueToolTip"];
            this.linkedFieldInMinValue = _data["linkedFieldInMinValue"];
            this.linkedFieldInMaxValue = _data["linkedFieldInMaxValue"];
            this.linkedFieldInReadonly = _data["linkedFieldInReadonly"];
            this.linkedFieldInRequired = _data["linkedFieldInRequired"];
            this.linkedFieldInVisible = _data["linkedFieldInVisible"];
            this.sortOrderInDialog = _data["sortOrderInDialog"];
            this.groupInDialog = _data["groupInDialog"];
            this.groupInDialogTitle = _data["groupInDialogTitle"];
            this.selectionCriteriaNumber = _data["selectionCriteriaNumber"];
            this.selectionCriteriaLinkedField = _data["selectionCriteriaLinkedField"];
            this.multipleDate = _data["multipleDate"];
            this.visibleInDialog = _data["visibleInDialog"];
            this.visibleInTableList = _data["visibleInTableList"];
            this.displayTotalsInList = _data["displayTotalsInList"];
            this.totalsInListType = _data["totalsInListType"];
            this.fixedInTableType = _data["fixedInTableType"];
            this.filterDefaultValue = _data["filterDefaultValue"];
            this.affectFormMode = _data["affectFormMode"];
            this.labelClass = _data["labelClass"];
            this.expressionInFilterList = _data["expressionInFilterList"];
            this.expressionInFilterListHana = _data["expressionInFilterListHana"];
            this.editableInList = _data["editableInList"];
            this.secondaryId = _data["secondaryId"];
            this.sendToMobileApp = _data["sendToMobileApp"];
            this.nameInAPI = _data["nameInAPI"];
            this.useConditionsInAutoComplete = _data["useConditionsInAutoComplete"];
            this.icon = _data["icon"];
            this.labelVisible = _data["labelVisible"];
            this.showEye = _data["showEye"];
            this.bigAddButton = _data["bigAddButton"];
            this.searchButton = _data["searchButton"];
            this.addButtonText = _data["addButtonText"];
            this.fieldClassName = _data["fieldClassName"];
            this.addButtonIcon = _data["addButtonIcon"];
            this.showOutsideLines = _data["showOutsideLines"];
            this.showOutsideLines_CurrentInTable = _data["showOutsideLines_CurrentInTable"];
            this.showInAutoCompleteList = _data["showInAutoCompleteList"];
            this.isLabelATextArea = _data["isLabelATextArea"];
            this.textAreaRows = _data["textAreaRows"];
            this.disableCurrency = _data["disableCurrency"];
            this.functionToExecute = _data["functionToExecute"];
            this.customLabel = _data["customLabel"];
            this.createNewInside = _data["createNewInside"];
            this.widthInList = _data["widthInList"];
            this.sapfsControl = _data["sapfsControl"];
            this.isDatePickerMonthMode = _data["isDatePickerMonthMode"];
            this.monthModeBeginOfMonth = _data["monthModeBeginOfMonth"];
            this.monthModeEndOfMonth = _data["monthModeEndOfMonth"];
            this.optionsToBeTranslated = _data["optionsToBeTranslated"];
            this.isImage = _data["isImage"];
            this.allowUploadFile = _data["allowUploadFile"];
            this.allowSignature = _data["allowSignature"];
            this.allowUsingCamera = _data["allowUsingCamera"];
            this.calendarInToolTipOnly = _data["calendarInToolTipOnly"];
            this.dataSourcePath = _data["dataSourcePath"];
            this.visibleInDialogOnly = _data["visibleInDialogOnly"];
            this.itemCodePropertyPropertyName = _data["itemCodePropertyPropertyName"];
            this.itemDescriptionPropertyName = _data["itemDescriptionPropertyName"];
            this.itmSerialNumberPropertyName = _data["itmSerialNumberPropertyName"];
            this.unitOfMeasurmentPropertyName = _data["unitOfMeasurmentPropertyName"];
            this.uomEntryPropertyName = _data["uomEntryPropertyName"];
            this.warehouseCodePropertyName = _data["warehouseCodePropertyName"];
            this.openQuantityPropertyName = _data["openQuantityPropertyName"];
            this.warningMessageEnabled = _data["warningMessageEnabled"];
            this.warningMessageText = _data["warningMessageText"];
            this.warningRegex = _data["warningRegex"];
            this.warningRegexCondition = _data["warningRegexCondition"];
            this.innerHTML = _data["innerHTML"];
            this.showOnTop = _data["showOnTop"];
            this.executeParentChangeOnLoad = _data["executeParentChangeOnLoad"];
            this.nav_Condition = _data["nav_Condition"];
            this.propertyCode = _data["propertyCode"];
            this.isProperty = _data["isProperty"];
            this.tag = _data["tag"];
            this.sort = _data["sort"];
            this.parent = _data["parent"];
            this.enableSearch = _data["enableSearch"];
            this.uniqueDefaultValue = _data["uniqueDefaultValue"];
            this.disabledDatesSQLStatementId = _data["disabledDatesSQLStatementId"];
            this.allowedDatesRangeSQLStatementId = _data["allowedDatesRangeSQLStatementId"];
        }
    }

    static fromJS(data: any): FieldAddtionalInformation {
        data = typeof data === 'object' ? data : {};
        let result = new FieldAddtionalInformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isPassword"] = this.isPassword;
        data["dataLabel"] = this.dataLabel;
        data["valueYes"] = this.valueYes;
        data["valueNo"] = this.valueNo;
        data["dbValueYes"] = this.dbValueYes;
        data["dbValueNo"] = this.dbValueNo;
        data["width"] = this.width;
        if (Array.isArray(this.properties)) {
            data["properties"] = [];
            for (let item of this.properties)
                data["properties"].push(item);
        }
        data["isSelect2"] = this.isSelect2;
        data["isMultiple"] = this.isMultiple;
        data["selectOptionsAsCards"] = this.selectOptionsAsCards;
        data["labelOnRight"] = this.labelOnRight;
        data["visible"] = this.visible;
        data["linkedFieldInQuery"] = this.linkedFieldInQuery;
        data["linkedFieldMinValueToolTip"] = this.linkedFieldMinValueToolTip;
        data["linkedFieldMaxValueToolTip"] = this.linkedFieldMaxValueToolTip;
        data["linkedFieldInMinValue"] = this.linkedFieldInMinValue;
        data["linkedFieldInMaxValue"] = this.linkedFieldInMaxValue;
        data["linkedFieldInReadonly"] = this.linkedFieldInReadonly;
        data["linkedFieldInRequired"] = this.linkedFieldInRequired;
        data["linkedFieldInVisible"] = this.linkedFieldInVisible;
        data["sortOrderInDialog"] = this.sortOrderInDialog;
        data["groupInDialog"] = this.groupInDialog;
        data["groupInDialogTitle"] = this.groupInDialogTitle;
        data["selectionCriteriaNumber"] = this.selectionCriteriaNumber;
        data["selectionCriteriaLinkedField"] = this.selectionCriteriaLinkedField;
        data["multipleDate"] = this.multipleDate;
        data["visibleInDialog"] = this.visibleInDialog;
        data["visibleInTableList"] = this.visibleInTableList;
        data["displayTotalsInList"] = this.displayTotalsInList;
        data["totalsInListType"] = this.totalsInListType;
        data["fixedInTableType"] = this.fixedInTableType;
        data["filterDefaultValue"] = this.filterDefaultValue;
        data["affectFormMode"] = this.affectFormMode;
        data["labelClass"] = this.labelClass;
        data["expressionInFilterList"] = this.expressionInFilterList;
        data["expressionInFilterListHana"] = this.expressionInFilterListHana;
        data["editableInList"] = this.editableInList;
        data["secondaryId"] = this.secondaryId;
        data["sendToMobileApp"] = this.sendToMobileApp;
        data["nameInAPI"] = this.nameInAPI;
        data["useConditionsInAutoComplete"] = this.useConditionsInAutoComplete;
        data["icon"] = this.icon;
        data["labelVisible"] = this.labelVisible;
        data["showEye"] = this.showEye;
        data["bigAddButton"] = this.bigAddButton;
        data["searchButton"] = this.searchButton;
        data["addButtonText"] = this.addButtonText;
        data["fieldClassName"] = this.fieldClassName;
        data["addButtonIcon"] = this.addButtonIcon;
        data["showOutsideLines"] = this.showOutsideLines;
        data["showOutsideLines_CurrentInTable"] = this.showOutsideLines_CurrentInTable;
        data["showInAutoCompleteList"] = this.showInAutoCompleteList;
        data["isLabelATextArea"] = this.isLabelATextArea;
        data["textAreaRows"] = this.textAreaRows;
        data["disableCurrency"] = this.disableCurrency;
        data["functionToExecute"] = this.functionToExecute;
        data["customLabel"] = this.customLabel;
        data["createNewInside"] = this.createNewInside;
        data["widthInList"] = this.widthInList;
        data["sapfsControl"] = this.sapfsControl;
        data["isDatePickerMonthMode"] = this.isDatePickerMonthMode;
        data["monthModeBeginOfMonth"] = this.monthModeBeginOfMonth;
        data["monthModeEndOfMonth"] = this.monthModeEndOfMonth;
        data["optionsToBeTranslated"] = this.optionsToBeTranslated;
        data["isImage"] = this.isImage;
        data["allowUploadFile"] = this.allowUploadFile;
        data["allowSignature"] = this.allowSignature;
        data["allowUsingCamera"] = this.allowUsingCamera;
        data["calendarInToolTipOnly"] = this.calendarInToolTipOnly;
        data["dataSourcePath"] = this.dataSourcePath;
        data["visibleInDialogOnly"] = this.visibleInDialogOnly;
        data["itemCodePropertyPropertyName"] = this.itemCodePropertyPropertyName;
        data["itemDescriptionPropertyName"] = this.itemDescriptionPropertyName;
        data["itmSerialNumberPropertyName"] = this.itmSerialNumberPropertyName;
        data["unitOfMeasurmentPropertyName"] = this.unitOfMeasurmentPropertyName;
        data["uomEntryPropertyName"] = this.uomEntryPropertyName;
        data["warehouseCodePropertyName"] = this.warehouseCodePropertyName;
        data["openQuantityPropertyName"] = this.openQuantityPropertyName;
        data["warningMessageEnabled"] = this.warningMessageEnabled;
        data["warningMessageText"] = this.warningMessageText;
        data["warningRegex"] = this.warningRegex;
        data["warningRegexCondition"] = this.warningRegexCondition;
        data["innerHTML"] = this.innerHTML;
        data["showOnTop"] = this.showOnTop;
        data["executeParentChangeOnLoad"] = this.executeParentChangeOnLoad;
        data["nav_Condition"] = this.nav_Condition;
        data["propertyCode"] = this.propertyCode;
        data["isProperty"] = this.isProperty;
        data["tag"] = this.tag;
        data["sort"] = this.sort;
        data["parent"] = this.parent;
        data["enableSearch"] = this.enableSearch;
        data["uniqueDefaultValue"] = this.uniqueDefaultValue;
        data["disabledDatesSQLStatementId"] = this.disabledDatesSQLStatementId;
        data["allowedDatesRangeSQLStatementId"] = this.allowedDatesRangeSQLStatementId;
        return data;
    }
}

export interface IFieldAddtionalInformation {
    isPassword?: boolean;
    dataLabel?: string | null;
    valueYes?: string | null;
    valueNo?: string | null;
    dbValueYes?: string | null;
    dbValueNo?: string | null;
    width?: number;
    properties?: string[] | null;
    isSelect2?: boolean;
    isMultiple?: boolean;
    selectOptionsAsCards?: boolean;
    labelOnRight?: boolean;
    visible?: boolean;
    linkedFieldInQuery?: string | null;
    linkedFieldMinValueToolTip?: string | null;
    linkedFieldMaxValueToolTip?: string | null;
    linkedFieldInMinValue?: string | null;
    linkedFieldInMaxValue?: string | null;
    linkedFieldInReadonly?: string | null;
    linkedFieldInRequired?: string | null;
    linkedFieldInVisible?: string | null;
    sortOrderInDialog?: number | null;
    groupInDialog?: string | null;
    groupInDialogTitle?: string | null;
    selectionCriteriaNumber?: number | null;
    selectionCriteriaLinkedField?: string | null;
    multipleDate?: string | null;
    visibleInDialog?: boolean;
    visibleInTableList?: boolean;
    displayTotalsInList?: boolean;
    totalsInListType?: TotalsInListType;
    fixedInTableType?: FixedType;
    filterDefaultValue?: string | null;
    affectFormMode?: boolean;
    labelClass?: string | null;
    expressionInFilterList?: string | null;
    expressionInFilterListHana?: string | null;
    editableInList?: boolean;
    secondaryId?: boolean;
    sendToMobileApp?: boolean;
    nameInAPI?: string | null;
    useConditionsInAutoComplete?: boolean;
    icon?: string | null;
    labelVisible?: boolean;
    showEye?: boolean;
    bigAddButton?: boolean;
    searchButton?: string | null;
    addButtonText?: string | null;
    fieldClassName?: string | null;
    addButtonIcon?: string | null;
    showOutsideLines?: boolean;
    showOutsideLines_CurrentInTable?: boolean;
    showInAutoCompleteList?: boolean;
    isLabelATextArea?: boolean;
    textAreaRows?: number;
    disableCurrency?: boolean;
    functionToExecute?: string | null;
    customLabel?: string | null;
    createNewInside?: boolean;
    widthInList?: number;
    sapfsControl?: string | null;
    isDatePickerMonthMode?: boolean;
    monthModeBeginOfMonth?: boolean;
    monthModeEndOfMonth?: boolean;
    optionsToBeTranslated?: boolean;
    isImage?: boolean;
    allowUploadFile?: boolean;
    allowSignature?: boolean;
    allowUsingCamera?: boolean;
    calendarInToolTipOnly?: boolean;
    dataSourcePath?: string | null;
    visibleInDialogOnly?: boolean;
    itemCodePropertyPropertyName?: string | null;
    itemDescriptionPropertyName?: string | null;
    itmSerialNumberPropertyName?: string | null;
    unitOfMeasurmentPropertyName?: string | null;
    uomEntryPropertyName?: string | null;
    warehouseCodePropertyName?: string | null;
    openQuantityPropertyName?: string | null;
    warningMessageEnabled?: boolean;
    warningMessageText?: string | null;
    warningRegex?: string | null;
    warningRegexCondition?: WarningRegexCondition;
    innerHTML?: string | null;
    showOnTop?: boolean;
    executeParentChangeOnLoad?: boolean;
    nav_Condition?: string | null;
    propertyCode?: string | null;
    isProperty?: boolean;
    tag?: string | null;
    sort?: string | null;
    parent?: string | null;
    enableSearch?: boolean;
    uniqueDefaultValue?: boolean;
    disabledDatesSQLStatementId?: number;
    allowedDatesRangeSQLStatementId?: number;
}



export enum FieldPCAlignment {
    None = "None",
    Left = "Left",
    Right = "Right",
    Extended = "Extended",
    Center = "Center",
}

export class FilterCondition implements IFilterCondition {
    field?: string | null;
    operator?: ComparisonOperator;
    value?: string | null;

    constructor(data?: IFilterCondition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.field = _data["field"];
            this.operator = _data["operator"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): FilterCondition {
        data = typeof data === 'object' ? data : {};
        let result = new FilterCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        data["operator"] = this.operator;
        data["value"] = this.value;
        return data;
    }
}

export interface IFilterCondition {
    field?: string | null;
    operator?: ComparisonOperator;
    value?: string | null;
}

export class FilterGroup implements IFilterGroup {
    logic?: LogicalOperator;
    conditions?: FilterCondition[] | null;
    groups?: FilterGroup[] | null;

    constructor(data?: IFilterGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.logic = _data["logic"];
            if (Array.isArray(_data["conditions"])) {
                this.conditions = [] as any;
                for (let item of _data["conditions"])
                    this.conditions!.push(FilterCondition.fromJS(item));
            }
            if (Array.isArray(_data["groups"])) {
                this.groups = [] as any;
                for (let item of _data["groups"])
                    this.groups!.push(FilterGroup.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FilterGroup {
        data = typeof data === 'object' ? data : {};
        let result = new FilterGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["logic"] = this.logic;
        if (Array.isArray(this.conditions)) {
            data["conditions"] = [];
            for (let item of this.conditions)
                data["conditions"].push(item.toJSON());
        }
        if (Array.isArray(this.groups)) {
            data["groups"] = [];
            for (let item of this.groups)
                data["groups"].push(item.toJSON());
        }
        return data;
    }
}

export interface IFilterGroup {
    logic?: LogicalOperator;
    conditions?: FilterCondition[] | null;
    groups?: FilterGroup[] | null;
}

export enum FixedType {
    None = "None",
    Left = "Left",
    Right = "Right",
}

export enum FooterType {
    None = "None",
    Sum = "Sum",
    Average = "Average",
}

export class FullRegistrationDto implements IFullRegistrationDto {
    firstName!: string;
    middleName?: string | null;
    lastName!: string;
    position!: string;
    email!: string;
    password!: string;
    contactEmail?: string | null;
    phoneNumber?: string | null;
    orgName!: string;
    countryCode!: string;
    orgLocalization!: string;
    currency!: string;
    companySize!: string;
    identifier!: string;

    constructor(data?: IFullRegistrationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.lastName = _data["lastName"];
            this.position = _data["position"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.contactEmail = _data["contactEmail"];
            this.phoneNumber = _data["phoneNumber"];
            this.orgName = _data["orgName"];
            this.countryCode = _data["countryCode"];
            this.orgLocalization = _data["orgLocalization"];
            this.currency = _data["currency"];
            this.companySize = _data["companySize"];
            this.identifier = _data["identifier"];
        }
    }

    static fromJS(data: any): FullRegistrationDto {
        data = typeof data === 'object' ? data : {};
        let result = new FullRegistrationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["lastName"] = this.lastName;
        data["position"] = this.position;
        data["email"] = this.email;
        data["password"] = this.password;
        data["contactEmail"] = this.contactEmail;
        data["phoneNumber"] = this.phoneNumber;
        data["orgName"] = this.orgName;
        data["countryCode"] = this.countryCode;
        data["orgLocalization"] = this.orgLocalization;
        data["currency"] = this.currency;
        data["companySize"] = this.companySize;
        data["identifier"] = this.identifier;
        return data;
    }
}

export interface IFullRegistrationDto {
    firstName: string;
    middleName?: string | null;
    lastName: string;
    position: string;
    email: string;
    password: string;
    contactEmail?: string | null;
    phoneNumber?: string | null;
    orgName: string;
    countryCode: string;
    orgLocalization: string;
    currency: string;
    companySize: string;
    identifier: string;
}

export class FullRegistrationResponse implements IFullRegistrationResponse {
    userId?: string | null;
    orgId?: string | null;
    orgDb?: string | null;

    constructor(data?: IFullRegistrationResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.orgId = _data["orgId"];
            this.orgDb = _data["orgDb"];
        }
    }

    static fromJS(data: any): FullRegistrationResponse {
        data = typeof data === 'object' ? data : {};
        let result = new FullRegistrationResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["orgId"] = this.orgId;
        data["orgDb"] = this.orgDb;
        return data;
    }
}

export interface IFullRegistrationResponse {
    userId?: string | null;
    orgId?: string | null;
    orgDb?: string | null;
}

export class InviteContactDto implements IInviteContactDto {
    authorizationProfileId?: string;

    constructor(data?: IInviteContactDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.authorizationProfileId = _data["authorizationProfileId"];
        }
    }

    static fromJS(data: any): InviteContactDto {
        data = typeof data === 'object' ? data : {};
        let result = new InviteContactDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authorizationProfileId"] = this.authorizationProfileId;
        return data;
    }
}

export interface IInviteContactDto {
    authorizationProfileId?: string;
}

export class LayoutDefinitionDto implements ILayoutDefinitionDto {
    id?: string;
    localizations?: string | null;
    areas?: string | null;
    isSystem?: boolean;
    organizationId?: string;
    roles?: string | null;
    type?: LayoutDefinitionType;
    template?: string | null;
    dataSourceId?: string | null;
    description?: string | null;
    totalFields?: string | null;
    columnSettings?: string | null;
    groubByColumn?: string | null;
    excelTemplatePath?: string | null;
    dataSource?: DataSourceDto;
    layoutDefinitionParameters?: LayoutParameterDto[] | null;

    constructor(data?: ILayoutDefinitionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.localizations = _data["localizations"];
            this.areas = _data["areas"];
            this.isSystem = _data["isSystem"];
            this.organizationId = _data["organizationId"];
            this.roles = _data["roles"];
            this.type = _data["type"];
            this.template = _data["template"];
            this.dataSourceId = _data["dataSourceId"];
            this.description = _data["description"];
            this.totalFields = _data["totalFields"];
            this.columnSettings = _data["columnSettings"];
            this.groubByColumn = _data["groubByColumn"];
            this.excelTemplatePath = _data["excelTemplatePath"];
            this.dataSource = _data["dataSource"] ? DataSourceDto.fromJS(_data["dataSource"]) : <any>null;
            if (Array.isArray(_data["layoutDefinitionParameters"])) {
                this.layoutDefinitionParameters = [] as any;
                for (let item of _data["layoutDefinitionParameters"])
                    this.layoutDefinitionParameters!.push(LayoutParameterDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LayoutDefinitionDto {
        data = typeof data === 'object' ? data : {};
        let result = new LayoutDefinitionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["localizations"] = this.localizations;
        data["areas"] = this.areas;
        data["isSystem"] = this.isSystem;
        data["organizationId"] = this.organizationId;
        data["roles"] = this.roles;
        data["type"] = this.type;
        data["template"] = this.template;
        data["dataSourceId"] = this.dataSourceId;
        data["description"] = this.description;
        data["totalFields"] = this.totalFields;
        data["columnSettings"] = this.columnSettings;
        data["groubByColumn"] = this.groubByColumn;
        data["excelTemplatePath"] = this.excelTemplatePath;
        data["dataSource"] = this.dataSource ? this.dataSource.toJSON() : this.dataSource;
        if (Array.isArray(this.layoutDefinitionParameters)) {
            data["layoutDefinitionParameters"] = [];
            for (let item of this.layoutDefinitionParameters)
                data["layoutDefinitionParameters"].push(item.toJSON());
        }
        return data;
    }
}

export interface ILayoutDefinitionDto {
    id?: string;
    localizations?: string | null;
    areas?: string | null;
    isSystem?: boolean;
    organizationId?: string;
    roles?: string | null;
    type?: LayoutDefinitionType;
    template?: string | null;
    dataSourceId?: string | null;
    description?: string | null;
    totalFields?: string | null;
    columnSettings?: string | null;
    groubByColumn?: string | null;
    excelTemplatePath?: string | null;
    dataSource?: DataSourceDto;
    layoutDefinitionParameters?: LayoutParameterDto[] | null;
}

export enum LayoutDefinitionParameterDataType {
    Field = "Field",
    Date = "Date",
    Time = "Time",
    DropDown = "DropDown",
    MultiSelect = "MultiSelect",
    BusinessPartnerProperties = "BusinessPartnerProperties",
    ItemProperties = "ItemProperties",
    Number = "Number",
}

export enum LayoutDefinitionType {
    Unknown = "Unknown",
    HTML = "HTML",
    Table = "Table",
    CrystalReport = "CrystalReport",
    CoresuiteDesigner = "CoresuiteDesigner",
    ForDashboard = "ForDashboard",
}

export class LayoutParameterDto implements ILayoutParameterDto {
    roles?: string | null;
    layoutDefinitionId?: string;
    fieldName?: string | null;
    label?: string | null;
    dataType?: LayoutDefinitionParameterDataType;
    dataSourceId?: string | null;
    defaultValue?: string | null;
    cssClasses?: string | null;
    tagProperties?: string | null;
    onChange?: string | null;
    order?: number | null;
    required?: boolean | null;
    dataSource?: DataSourceDto;
    readonly howToUseIt?: string | null;

    constructor(data?: ILayoutParameterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roles = _data["roles"];
            this.layoutDefinitionId = _data["layoutDefinitionId"];
            this.fieldName = _data["fieldName"];
            this.label = _data["label"];
            this.dataType = _data["dataType"];
            this.dataSourceId = _data["dataSourceId"];
            this.defaultValue = _data["defaultValue"];
            this.cssClasses = _data["cssClasses"];
            this.tagProperties = _data["tagProperties"];
            this.onChange = _data["onChange"];
            this.order = _data["order"];
            this.required = _data["required"];
            this.dataSource = _data["dataSource"] ? DataSourceDto.fromJS(_data["dataSource"]) : <any>null;
            (<any>this).howToUseIt = _data["howToUseIt"];
        }
    }

    static fromJS(data: any): LayoutParameterDto {
        data = typeof data === 'object' ? data : {};
        let result = new LayoutParameterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roles"] = this.roles;
        data["layoutDefinitionId"] = this.layoutDefinitionId;
        data["fieldName"] = this.fieldName;
        data["label"] = this.label;
        data["dataType"] = this.dataType;
        data["dataSourceId"] = this.dataSourceId;
        data["defaultValue"] = this.defaultValue;
        data["cssClasses"] = this.cssClasses;
        data["tagProperties"] = this.tagProperties;
        data["onChange"] = this.onChange;
        data["order"] = this.order;
        data["required"] = this.required;
        data["dataSource"] = this.dataSource ? this.dataSource.toJSON() : this.dataSource;
        data["howToUseIt"] = this.howToUseIt;
        return data;
    }
}

export interface ILayoutParameterDto {
    roles?: string | null;
    layoutDefinitionId?: string;
    fieldName?: string | null;
    label?: string | null;
    dataType?: LayoutDefinitionParameterDataType;
    dataSourceId?: string | null;
    defaultValue?: string | null;
    cssClasses?: string | null;
    tagProperties?: string | null;
    onChange?: string | null;
    order?: number | null;
    required?: boolean | null;
    dataSource?: DataSourceDto;
    howToUseIt?: string | null;
}

export enum LogicalOperator {
    AND = "AND",
    OR = "OR",
}

export class LoginRequest implements ILoginRequest {
    email!: string;
    password!: string;

    constructor(data?: ILoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginRequest {
    email: string;
    password: string;
}

export class LoginResponse implements ILoginResponse {
    id?: string | null;
    email?: string | null;
    token?: string | null;
    fullName?: string | null;

    constructor(data?: ILoginResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.email = _data["email"];
            this.token = _data["token"];
            this.fullName = _data["fullName"];
        }
    }

    static fromJS(data: any): LoginResponse {
        data = typeof data === 'object' ? data : {};
        let result = new LoginResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["email"] = this.email;
        data["token"] = this.token;
        data["fullName"] = this.fullName;
        return data;
    }
}

export interface ILoginResponse {
    id?: string | null;
    email?: string | null;
    token?: string | null;
    fullName?: string | null;
}

export class LogoutRequest implements ILogoutRequest {
    token?: string | null;

    constructor(data?: ILogoutRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): LogoutRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LogoutRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        return data;
    }
}

export interface ILogoutRequest {
    token?: string | null;
}

export class MenuAdditionalInformation implements IMenuAdditionalInformation {
    displayInHomePage?: boolean;
    displayBadge?: boolean;
    sqlStatementIdForBadge?: number;
    urlDataParameters?: string | null;

    constructor(data?: IMenuAdditionalInformation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayInHomePage = _data["displayInHomePage"];
            this.displayBadge = _data["displayBadge"];
            this.sqlStatementIdForBadge = _data["sqlStatementIdForBadge"];
            this.urlDataParameters = _data["urlDataParameters"];
        }
    }

    static fromJS(data: any): MenuAdditionalInformation {
        data = typeof data === 'object' ? data : {};
        let result = new MenuAdditionalInformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayInHomePage"] = this.displayInHomePage;
        data["displayBadge"] = this.displayBadge;
        data["sqlStatementIdForBadge"] = this.sqlStatementIdForBadge;
        data["urlDataParameters"] = this.urlDataParameters;
        return data;
    }
}

export interface IMenuAdditionalInformation {
    displayInHomePage?: boolean;
    displayBadge?: boolean;
    sqlStatementIdForBadge?: number;
    urlDataParameters?: string | null;
}

export class MenuDto implements IMenuDto {
    id?: string;
    localizations?: string | null;
    areas?: string | null;
    isSystem?: boolean;
    organizationId?: string;
    roles?: string | null;
    label?: string | null;
    parentMenuId?: string | null;
    type?: MenuType;
    sortOrder?: number | null;
    icon?: string | null;
    url?: string | null;
    target?: string | null;
    additionalInformationParsed?: MenuAdditionalInformation;
    childMenus?: MenuDto[] | null;

    constructor(data?: IMenuDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.localizations = _data["localizations"];
            this.areas = _data["areas"];
            this.isSystem = _data["isSystem"];
            this.organizationId = _data["organizationId"];
            this.roles = _data["roles"];
            this.label = _data["label"];
            this.parentMenuId = _data["parentMenuId"];
            this.type = _data["type"];
            this.sortOrder = _data["sortOrder"];
            this.icon = _data["icon"];
            this.url = _data["url"];
            this.target = _data["target"];
            this.additionalInformationParsed = _data["additionalInformationParsed"] ? MenuAdditionalInformation.fromJS(_data["additionalInformationParsed"]) : <any>null;
            if (Array.isArray(_data["childMenus"])) {
                this.childMenus = [] as any;
                for (let item of _data["childMenus"])
                    this.childMenus!.push(MenuDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MenuDto {
        data = typeof data === 'object' ? data : {};
        let result = new MenuDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["localizations"] = this.localizations;
        data["areas"] = this.areas;
        data["isSystem"] = this.isSystem;
        data["organizationId"] = this.organizationId;
        data["roles"] = this.roles;
        data["label"] = this.label;
        data["parentMenuId"] = this.parentMenuId;
        data["type"] = this.type;
        data["sortOrder"] = this.sortOrder;
        data["icon"] = this.icon;
        data["url"] = this.url;
        data["target"] = this.target;
        data["additionalInformationParsed"] = this.additionalInformationParsed ? this.additionalInformationParsed.toJSON() : this.additionalInformationParsed;
        if (Array.isArray(this.childMenus)) {
            data["childMenus"] = [];
            for (let item of this.childMenus)
                data["childMenus"].push(item.toJSON());
        }
        return data;
    }
}

export interface IMenuDto {
    id?: string;
    localizations?: string | null;
    areas?: string | null;
    isSystem?: boolean;
    organizationId?: string;
    roles?: string | null;
    label?: string | null;
    parentMenuId?: string | null;
    type?: MenuType;
    sortOrder?: number | null;
    icon?: string | null;
    url?: string | null;
    target?: string | null;
    additionalInformationParsed?: MenuAdditionalInformation;
    childMenus?: MenuDto[] | null;
}

export enum MenuType {
    Link = "Link",
    Folder = "Folder",
}

export class ModuleAdditionInformation implements IModuleAdditionInformation {
    displaySuccessMessageAfterAdd?: boolean;
    successMessageAfterAdd?: string | null;
    displayViewRecordBtnAfterAdd?: boolean;
    displayAddNewBtnAfterAdd?: boolean;
    displayGoToListBtnAfterAdd?: boolean;
    notSeletablFieldName?: string | null;
    afterCreateGoToNew?: boolean;
    navigateToRecordDirectly?: boolean;
    executeViewRecordAfterAdd?: boolean;
    enableGeneratToken?: boolean;
    enableKanban?: boolean;
    kanbanBoardsQueryId?: number;
    kanbanPropertyName?: string | null;
    mobileListTemplate?: string | null;
    listTemplate?: string | null;
    singleSelection?: boolean;
    hideViewButton?: boolean;
    hideDuplicateButton?: boolean;
    forbidEditQuery?: string | null;
    reloadAfterUpdate?: string | null;
    goBackAfterCreate?: boolean;
    listTableName?: string | null;
    singleSelectionWithCheckBox?: boolean;
    additionalSearchFields?: string[] | null;
    extraSearchFields?: string | null;
    autoCompleteCondition?: string | null;
    autoCompleteTemplate?: string | null;
    shortName?: string | null;
    searchOnlyOnPrimayKey?: boolean;
    copyOpenQtyToQuantityField?: boolean;
    inventoryDirection?: ModuleInventoryDirection;
    moduleApp?: string | null;
    whenScanLookForExistingBatch?: boolean;
    singleMode?: boolean;
    draftModuleName?: string | null;
    draftTableName?: string | null;
    draftMandatoryFilter?: string | null;
    allowSaveToDraft?: boolean;
    showCommentSection?: boolean;
    showCommunication?: boolean;
    showAddButton?: boolean;
    showBackButton?: boolean;
    tokenizedPageEditable?: boolean;
    allowCopyFrom?: boolean;
    actionsExpanded?: boolean;
    tokenizedPageHeaderTemplate?: string | null;
    tokenizedPageLineHeaderTemplate?: string | null;
    tokenizedLineTemplate?: string | null;
    tokenizedFooterTemplate?: string | null;
    isCustomData?: boolean;
    customDataSource?: string | null;
    createNewText?: string | null;
    listOfText?: string | null;
    detailsTitleText?: string | null;
    showDuplicateButton?: boolean;
    recordDetailsFieldName?: string | null;
    additionalLayouts?: number[] | null;
    sourceDocuments?: string[] | null;
    allowExportToExcel?: boolean;
    allowSaveToFinalDocument?: boolean;
    submitButtonIcon?: string | null;
    addButtonText?: string | null;
    updateButtonText?: string | null;
    viewButtonText?: string | null;
    listHintMessage?: string | null;

    constructor(data?: IModuleAdditionInformation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displaySuccessMessageAfterAdd = _data["displaySuccessMessageAfterAdd"];
            this.successMessageAfterAdd = _data["successMessageAfterAdd"];
            this.displayViewRecordBtnAfterAdd = _data["displayViewRecordBtnAfterAdd"];
            this.displayAddNewBtnAfterAdd = _data["displayAddNewBtnAfterAdd"];
            this.displayGoToListBtnAfterAdd = _data["displayGoToListBtnAfterAdd"];
            this.notSeletablFieldName = _data["notSeletablFieldName"];
            this.afterCreateGoToNew = _data["afterCreateGoToNew"];
            this.navigateToRecordDirectly = _data["navigateToRecordDirectly"];
            this.executeViewRecordAfterAdd = _data["executeViewRecordAfterAdd"];
            this.enableGeneratToken = _data["enableGeneratToken"];
            this.enableKanban = _data["enableKanban"];
            this.kanbanBoardsQueryId = _data["kanbanBoardsQueryId"];
            this.kanbanPropertyName = _data["kanbanPropertyName"];
            this.mobileListTemplate = _data["mobileListTemplate"];
            this.listTemplate = _data["listTemplate"];
            this.singleSelection = _data["singleSelection"];
            this.hideViewButton = _data["hideViewButton"];
            this.hideDuplicateButton = _data["hideDuplicateButton"];
            this.forbidEditQuery = _data["forbidEditQuery"];
            this.reloadAfterUpdate = _data["reloadAfterUpdate"];
            this.goBackAfterCreate = _data["goBackAfterCreate"];
            this.listTableName = _data["listTableName"];
            this.singleSelectionWithCheckBox = _data["singleSelectionWithCheckBox"];
            if (Array.isArray(_data["additionalSearchFields"])) {
                this.additionalSearchFields = [] as any;
                for (let item of _data["additionalSearchFields"])
                    this.additionalSearchFields!.push(item);
            }
            this.extraSearchFields = _data["extraSearchFields"];
            this.autoCompleteCondition = _data["autoCompleteCondition"];
            this.autoCompleteTemplate = _data["autoCompleteTemplate"];
            this.shortName = _data["shortName"];
            this.searchOnlyOnPrimayKey = _data["searchOnlyOnPrimayKey"];
            this.copyOpenQtyToQuantityField = _data["copyOpenQtyToQuantityField"];
            this.inventoryDirection = _data["inventoryDirection"];
            this.moduleApp = _data["moduleApp"];
            this.whenScanLookForExistingBatch = _data["whenScanLookForExistingBatch"];
            this.singleMode = _data["singleMode"];
            this.draftModuleName = _data["draftModuleName"];
            this.draftTableName = _data["draftTableName"];
            this.draftMandatoryFilter = _data["draftMandatoryFilter"];
            this.allowSaveToDraft = _data["allowSaveToDraft"];
            this.showCommentSection = _data["showCommentSection"];
            this.showCommunication = _data["showCommunication"];
            this.showAddButton = _data["showAddButton"];
            this.showBackButton = _data["showBackButton"];
            this.tokenizedPageEditable = _data["tokenizedPageEditable"];
            this.allowCopyFrom = _data["allowCopyFrom"];
            this.actionsExpanded = _data["actionsExpanded"];
            this.tokenizedPageHeaderTemplate = _data["tokenizedPageHeaderTemplate"];
            this.tokenizedPageLineHeaderTemplate = _data["tokenizedPageLineHeaderTemplate"];
            this.tokenizedLineTemplate = _data["tokenizedLineTemplate"];
            this.tokenizedFooterTemplate = _data["tokenizedFooterTemplate"];
            this.isCustomData = _data["isCustomData"];
            this.customDataSource = _data["customDataSource"];
            this.createNewText = _data["createNewText"];
            this.listOfText = _data["listOfText"];
            this.detailsTitleText = _data["detailsTitleText"];
            this.showDuplicateButton = _data["showDuplicateButton"];
            this.recordDetailsFieldName = _data["recordDetailsFieldName"];
            if (Array.isArray(_data["additionalLayouts"])) {
                this.additionalLayouts = [] as any;
                for (let item of _data["additionalLayouts"])
                    this.additionalLayouts!.push(item);
            }
            if (Array.isArray(_data["sourceDocuments"])) {
                this.sourceDocuments = [] as any;
                for (let item of _data["sourceDocuments"])
                    this.sourceDocuments!.push(item);
            }
            this.allowExportToExcel = _data["allowExportToExcel"];
            this.allowSaveToFinalDocument = _data["allowSaveToFinalDocument"];
            this.submitButtonIcon = _data["submitButtonIcon"];
            this.addButtonText = _data["addButtonText"];
            this.updateButtonText = _data["updateButtonText"];
            this.viewButtonText = _data["viewButtonText"];
            this.listHintMessage = _data["listHintMessage"];
        }
    }

    static fromJS(data: any): ModuleAdditionInformation {
        data = typeof data === 'object' ? data : {};
        let result = new ModuleAdditionInformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displaySuccessMessageAfterAdd"] = this.displaySuccessMessageAfterAdd;
        data["successMessageAfterAdd"] = this.successMessageAfterAdd;
        data["displayViewRecordBtnAfterAdd"] = this.displayViewRecordBtnAfterAdd;
        data["displayAddNewBtnAfterAdd"] = this.displayAddNewBtnAfterAdd;
        data["displayGoToListBtnAfterAdd"] = this.displayGoToListBtnAfterAdd;
        data["notSeletablFieldName"] = this.notSeletablFieldName;
        data["afterCreateGoToNew"] = this.afterCreateGoToNew;
        data["navigateToRecordDirectly"] = this.navigateToRecordDirectly;
        data["executeViewRecordAfterAdd"] = this.executeViewRecordAfterAdd;
        data["enableGeneratToken"] = this.enableGeneratToken;
        data["enableKanban"] = this.enableKanban;
        data["kanbanBoardsQueryId"] = this.kanbanBoardsQueryId;
        data["kanbanPropertyName"] = this.kanbanPropertyName;
        data["mobileListTemplate"] = this.mobileListTemplate;
        data["listTemplate"] = this.listTemplate;
        data["singleSelection"] = this.singleSelection;
        data["hideViewButton"] = this.hideViewButton;
        data["hideDuplicateButton"] = this.hideDuplicateButton;
        data["forbidEditQuery"] = this.forbidEditQuery;
        data["reloadAfterUpdate"] = this.reloadAfterUpdate;
        data["goBackAfterCreate"] = this.goBackAfterCreate;
        data["listTableName"] = this.listTableName;
        data["singleSelectionWithCheckBox"] = this.singleSelectionWithCheckBox;
        if (Array.isArray(this.additionalSearchFields)) {
            data["additionalSearchFields"] = [];
            for (let item of this.additionalSearchFields)
                data["additionalSearchFields"].push(item);
        }
        data["extraSearchFields"] = this.extraSearchFields;
        data["autoCompleteCondition"] = this.autoCompleteCondition;
        data["autoCompleteTemplate"] = this.autoCompleteTemplate;
        data["shortName"] = this.shortName;
        data["searchOnlyOnPrimayKey"] = this.searchOnlyOnPrimayKey;
        data["copyOpenQtyToQuantityField"] = this.copyOpenQtyToQuantityField;
        data["inventoryDirection"] = this.inventoryDirection;
        data["moduleApp"] = this.moduleApp;
        data["whenScanLookForExistingBatch"] = this.whenScanLookForExistingBatch;
        data["singleMode"] = this.singleMode;
        data["draftModuleName"] = this.draftModuleName;
        data["draftTableName"] = this.draftTableName;
        data["draftMandatoryFilter"] = this.draftMandatoryFilter;
        data["allowSaveToDraft"] = this.allowSaveToDraft;
        data["showCommentSection"] = this.showCommentSection;
        data["showCommunication"] = this.showCommunication;
        data["showAddButton"] = this.showAddButton;
        data["showBackButton"] = this.showBackButton;
        data["tokenizedPageEditable"] = this.tokenizedPageEditable;
        data["allowCopyFrom"] = this.allowCopyFrom;
        data["actionsExpanded"] = this.actionsExpanded;
        data["tokenizedPageHeaderTemplate"] = this.tokenizedPageHeaderTemplate;
        data["tokenizedPageLineHeaderTemplate"] = this.tokenizedPageLineHeaderTemplate;
        data["tokenizedLineTemplate"] = this.tokenizedLineTemplate;
        data["tokenizedFooterTemplate"] = this.tokenizedFooterTemplate;
        data["isCustomData"] = this.isCustomData;
        data["customDataSource"] = this.customDataSource;
        data["createNewText"] = this.createNewText;
        data["listOfText"] = this.listOfText;
        data["detailsTitleText"] = this.detailsTitleText;
        data["showDuplicateButton"] = this.showDuplicateButton;
        data["recordDetailsFieldName"] = this.recordDetailsFieldName;
        if (Array.isArray(this.additionalLayouts)) {
            data["additionalLayouts"] = [];
            for (let item of this.additionalLayouts)
                data["additionalLayouts"].push(item);
        }
        if (Array.isArray(this.sourceDocuments)) {
            data["sourceDocuments"] = [];
            for (let item of this.sourceDocuments)
                data["sourceDocuments"].push(item);
        }
        data["allowExportToExcel"] = this.allowExportToExcel;
        data["allowSaveToFinalDocument"] = this.allowSaveToFinalDocument;
        data["submitButtonIcon"] = this.submitButtonIcon;
        data["addButtonText"] = this.addButtonText;
        data["updateButtonText"] = this.updateButtonText;
        data["viewButtonText"] = this.viewButtonText;
        data["listHintMessage"] = this.listHintMessage;
        return data;
    }
}

export interface IModuleAdditionInformation {
    displaySuccessMessageAfterAdd?: boolean;
    successMessageAfterAdd?: string | null;
    displayViewRecordBtnAfterAdd?: boolean;
    displayAddNewBtnAfterAdd?: boolean;
    displayGoToListBtnAfterAdd?: boolean;
    notSeletablFieldName?: string | null;
    afterCreateGoToNew?: boolean;
    navigateToRecordDirectly?: boolean;
    executeViewRecordAfterAdd?: boolean;
    enableGeneratToken?: boolean;
    enableKanban?: boolean;
    kanbanBoardsQueryId?: number;
    kanbanPropertyName?: string | null;
    mobileListTemplate?: string | null;
    listTemplate?: string | null;
    singleSelection?: boolean;
    hideViewButton?: boolean;
    hideDuplicateButton?: boolean;
    forbidEditQuery?: string | null;
    reloadAfterUpdate?: string | null;
    goBackAfterCreate?: boolean;
    listTableName?: string | null;
    singleSelectionWithCheckBox?: boolean;
    additionalSearchFields?: string[] | null;
    extraSearchFields?: string | null;
    autoCompleteCondition?: string | null;
    autoCompleteTemplate?: string | null;
    shortName?: string | null;
    searchOnlyOnPrimayKey?: boolean;
    copyOpenQtyToQuantityField?: boolean;
    inventoryDirection?: ModuleInventoryDirection;
    moduleApp?: string | null;
    whenScanLookForExistingBatch?: boolean;
    singleMode?: boolean;
    draftModuleName?: string | null;
    draftTableName?: string | null;
    draftMandatoryFilter?: string | null;
    allowSaveToDraft?: boolean;
    showCommentSection?: boolean;
    showCommunication?: boolean;
    showAddButton?: boolean;
    showBackButton?: boolean;
    tokenizedPageEditable?: boolean;
    allowCopyFrom?: boolean;
    actionsExpanded?: boolean;
    tokenizedPageHeaderTemplate?: string | null;
    tokenizedPageLineHeaderTemplate?: string | null;
    tokenizedLineTemplate?: string | null;
    tokenizedFooterTemplate?: string | null;
    isCustomData?: boolean;
    customDataSource?: string | null;
    createNewText?: string | null;
    listOfText?: string | null;
    detailsTitleText?: string | null;
    showDuplicateButton?: boolean;
    recordDetailsFieldName?: string | null;
    additionalLayouts?: number[] | null;
    sourceDocuments?: string[] | null;
    allowExportToExcel?: boolean;
    allowSaveToFinalDocument?: boolean;
    submitButtonIcon?: string | null;
    addButtonText?: string | null;
    updateButtonText?: string | null;
    viewButtonText?: string | null;
    listHintMessage?: string | null;
}

export class ModuleButtonAdditionalInformation implements IModuleButtonAdditionalInformation {
    label?: string | null;
    customActionCode?: string | null;
    allowInEditMode?: boolean;
    allowInAddMode?: boolean;
    allowInViewMode?: boolean;
    displayConditions?: string | null;
    showConfirmation?: boolean;
    confirmationMessage?: string | null;
    submitBeforeExecute?: boolean;
    isPrimary?: boolean;
    buttonIcon?: string | null;

    constructor(data?: IModuleButtonAdditionalInformation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.label = _data["label"];
            this.customActionCode = _data["customActionCode"];
            this.allowInEditMode = _data["allowInEditMode"];
            this.allowInAddMode = _data["allowInAddMode"];
            this.allowInViewMode = _data["allowInViewMode"];
            this.displayConditions = _data["displayConditions"];
            this.showConfirmation = _data["showConfirmation"];
            this.confirmationMessage = _data["confirmationMessage"];
            this.submitBeforeExecute = _data["submitBeforeExecute"];
            this.isPrimary = _data["isPrimary"];
            this.buttonIcon = _data["buttonIcon"];
        }
    }

    static fromJS(data: any): ModuleButtonAdditionalInformation {
        data = typeof data === 'object' ? data : {};
        let result = new ModuleButtonAdditionalInformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["customActionCode"] = this.customActionCode;
        data["allowInEditMode"] = this.allowInEditMode;
        data["allowInAddMode"] = this.allowInAddMode;
        data["allowInViewMode"] = this.allowInViewMode;
        data["displayConditions"] = this.displayConditions;
        data["showConfirmation"] = this.showConfirmation;
        data["confirmationMessage"] = this.confirmationMessage;
        data["submitBeforeExecute"] = this.submitBeforeExecute;
        data["isPrimary"] = this.isPrimary;
        data["buttonIcon"] = this.buttonIcon;
        return data;
    }
}

export interface IModuleButtonAdditionalInformation {
    label?: string | null;
    customActionCode?: string | null;
    allowInEditMode?: boolean;
    allowInAddMode?: boolean;
    allowInViewMode?: boolean;
    displayConditions?: string | null;
    showConfirmation?: boolean;
    confirmationMessage?: string | null;
    submitBeforeExecute?: boolean;
    isPrimary?: boolean;
    buttonIcon?: string | null;
}

export class ModuleButtonsDto implements IModuleButtonsDto {
    id?: string;
    localizations?: string | null;
    areas?: string | null;
    isSystem?: boolean;
    organizationId?: string;
    moduleId?: string;
    internalDescription?: string | null;
    sectionId?: string | null;
    layoutDefinitionId?: string | null;
    optionsDataSourceId?: string | null;
    additionalInformationParsed?: ModuleButtonAdditionalInformation;

    constructor(data?: IModuleButtonsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.localizations = _data["localizations"];
            this.areas = _data["areas"];
            this.isSystem = _data["isSystem"];
            this.organizationId = _data["organizationId"];
            this.moduleId = _data["moduleId"];
            this.internalDescription = _data["internalDescription"];
            this.sectionId = _data["sectionId"];
            this.layoutDefinitionId = _data["layoutDefinitionId"];
            this.optionsDataSourceId = _data["optionsDataSourceId"];
            this.additionalInformationParsed = _data["additionalInformationParsed"] ? ModuleButtonAdditionalInformation.fromJS(_data["additionalInformationParsed"]) : <any>null;
        }
    }

    static fromJS(data: any): ModuleButtonsDto {
        data = typeof data === 'object' ? data : {};
        let result = new ModuleButtonsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["localizations"] = this.localizations;
        data["areas"] = this.areas;
        data["isSystem"] = this.isSystem;
        data["organizationId"] = this.organizationId;
        data["moduleId"] = this.moduleId;
        data["internalDescription"] = this.internalDescription;
        data["sectionId"] = this.sectionId;
        data["layoutDefinitionId"] = this.layoutDefinitionId;
        data["optionsDataSourceId"] = this.optionsDataSourceId;
        data["additionalInformationParsed"] = this.additionalInformationParsed ? this.additionalInformationParsed.toJSON() : this.additionalInformationParsed;
        return data;
    }
}

export interface IModuleButtonsDto {
    id?: string;
    localizations?: string | null;
    areas?: string | null;
    isSystem?: boolean;
    organizationId?: string;
    moduleId?: string;
    internalDescription?: string | null;
    sectionId?: string | null;
    layoutDefinitionId?: string | null;
    optionsDataSourceId?: string | null;
    additionalInformationParsed?: ModuleButtonAdditionalInformation;
}

export class ModuleDto implements IModuleDto {
    id?: string;
    localizations?: string | null;
    areas?: string | null;
    isSystem?: boolean;
    organizationId?: string;
    roles?: string | null;
    objectType?: string | null;
    name?: string | null;
    pluralName?: string | null;
    orderByScript?: string | null;
    mandatoryFilter?: string | null;
    dataSourceId?: string | null;
    baseModuleId?: string | null;
    mandatoryFilterMode?: ModuleMandatoryFilterMode;
    layoutDefinitionId?: string | null;
    additionalInformationParsed?: ModuleAdditionInformation;
    sqlStatementData?: DataSourceDto;
    sections?: SectionDto[] | null;
    searchExps?: SearchExpDto[] | null;
    moduleButtons?: ModuleButtonsDto[] | null;
    actions?: ActionDto[] | null;

    constructor(data?: IModuleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.localizations = _data["localizations"];
            this.areas = _data["areas"];
            this.isSystem = _data["isSystem"];
            this.organizationId = _data["organizationId"];
            this.roles = _data["roles"];
            this.objectType = _data["objectType"];
            this.name = _data["name"];
            this.pluralName = _data["pluralName"];
            this.orderByScript = _data["orderByScript"];
            this.mandatoryFilter = _data["mandatoryFilter"];
            this.dataSourceId = _data["dataSourceId"];
            this.baseModuleId = _data["baseModuleId"];
            this.mandatoryFilterMode = _data["mandatoryFilterMode"];
            this.layoutDefinitionId = _data["layoutDefinitionId"];
            this.additionalInformationParsed = _data["additionalInformationParsed"] ? ModuleAdditionInformation.fromJS(_data["additionalInformationParsed"]) : <any>null;
            this.sqlStatementData = _data["sqlStatementData"] ? DataSourceDto.fromJS(_data["sqlStatementData"]) : <any>null;
            if (Array.isArray(_data["sections"])) {
                this.sections = [] as any;
                for (let item of _data["sections"])
                    this.sections!.push(SectionDto.fromJS(item));
            }
            if (Array.isArray(_data["searchExps"])) {
                this.searchExps = [] as any;
                for (let item of _data["searchExps"])
                    this.searchExps!.push(SearchExpDto.fromJS(item));
            }
            if (Array.isArray(_data["moduleButtons"])) {
                this.moduleButtons = [] as any;
                for (let item of _data["moduleButtons"])
                    this.moduleButtons!.push(ModuleButtonsDto.fromJS(item));
            }
            if (Array.isArray(_data["actions"])) {
                this.actions = [] as any;
                for (let item of _data["actions"])
                    this.actions!.push(ActionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ModuleDto {
        data = typeof data === 'object' ? data : {};
        let result = new ModuleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["localizations"] = this.localizations;
        data["areas"] = this.areas;
        data["isSystem"] = this.isSystem;
        data["organizationId"] = this.organizationId;
        data["roles"] = this.roles;
        data["objectType"] = this.objectType;
        data["name"] = this.name;
        data["pluralName"] = this.pluralName;
        data["orderByScript"] = this.orderByScript;
        data["mandatoryFilter"] = this.mandatoryFilter;
        data["dataSourceId"] = this.dataSourceId;
        data["baseModuleId"] = this.baseModuleId;
        data["mandatoryFilterMode"] = this.mandatoryFilterMode;
        data["layoutDefinitionId"] = this.layoutDefinitionId;
        data["additionalInformationParsed"] = this.additionalInformationParsed ? this.additionalInformationParsed.toJSON() : this.additionalInformationParsed;
        data["sqlStatementData"] = this.sqlStatementData ? this.sqlStatementData.toJSON() : this.sqlStatementData;
        if (Array.isArray(this.sections)) {
            data["sections"] = [];
            for (let item of this.sections)
                data["sections"].push(item.toJSON());
        }
        if (Array.isArray(this.searchExps)) {
            data["searchExps"] = [];
            for (let item of this.searchExps)
                data["searchExps"].push(item.toJSON());
        }
        if (Array.isArray(this.moduleButtons)) {
            data["moduleButtons"] = [];
            for (let item of this.moduleButtons)
                data["moduleButtons"].push(item.toJSON());
        }
        if (Array.isArray(this.actions)) {
            data["actions"] = [];
            for (let item of this.actions)
                data["actions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IModuleDto {
    id?: string;
    localizations?: string | null;
    areas?: string | null;
    isSystem?: boolean;
    organizationId?: string;
    roles?: string | null;
    objectType?: string | null;
    name?: string | null;
    pluralName?: string | null;
    orderByScript?: string | null;
    mandatoryFilter?: string | null;
    dataSourceId?: string | null;
    baseModuleId?: string | null;
    mandatoryFilterMode?: ModuleMandatoryFilterMode;
    layoutDefinitionId?: string | null;
    additionalInformationParsed?: ModuleAdditionInformation;
    sqlStatementData?: DataSourceDto;
    sections?: SectionDto[] | null;
    searchExps?: SearchExpDto[] | null;
    moduleButtons?: ModuleButtonsDto[] | null;
    actions?: ActionDto[] | null;
}

export enum ModuleInventoryDirection {
    None = "None",
}

export enum ModuleMandatoryFilterMode {
    HideInIndexAndChooseFromList = "HideInIndexAndChooseFromList",
    ShowInIndexReadOnlyAndHideChooseFromList = "ShowInIndexReadOnlyAndHideChooseFromList",
    ShowInIndexReadOnlyAndShowChooseFromListNotSelectable = "ShowInIndexReadOnlyAndShowChooseFromListNotSelectable",
}

export class OrgLoginRequest implements IOrgLoginRequest {
    organizationId!: string;

    constructor(data?: IOrgLoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.organizationId = _data["organizationId"];
        }
    }

    static fromJS(data: any): OrgLoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new OrgLoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationId"] = this.organizationId;
        return data;
    }
}

export interface IOrgLoginRequest {
    organizationId: string;
}

export class OrgLoginResponse implements IOrgLoginResponse {
    id?: string | null;
    email?: string | null;
    token?: string | null;
    refreshToken?: string | null;
    role?: string | null;

    constructor(data?: IOrgLoginResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.email = _data["email"];
            this.token = _data["token"];
            this.refreshToken = _data["refreshToken"];
            this.role = _data["role"];
        }
    }

    static fromJS(data: any): OrgLoginResponse {
        data = typeof data === 'object' ? data : {};
        let result = new OrgLoginResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["email"] = this.email;
        data["token"] = this.token;
        data["refreshToken"] = this.refreshToken;
        data["role"] = this.role;
        return data;
    }
}

export interface IOrgLoginResponse {
    id?: string | null;
    email?: string | null;
    token?: string | null;
    refreshToken?: string | null;
    role?: string | null;
}

export class OrgRegistrationResponse implements IOrgRegistrationResponse {
    userId?: string | null;
    organizationId?: string | null;
    orgDb?: string | null;

    constructor(data?: IOrgRegistrationResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.organizationId = _data["organizationId"];
            this.orgDb = _data["orgDb"];
        }
    }

    static fromJS(data: any): OrgRegistrationResponse {
        data = typeof data === 'object' ? data : {};
        let result = new OrgRegistrationResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["organizationId"] = this.organizationId;
        data["orgDb"] = this.orgDb;
        return data;
    }
}

export interface IOrgRegistrationResponse {
    userId?: string | null;
    organizationId?: string | null;
    orgDb?: string | null;
}

export class OrganizationDetailsDto implements IOrganizationDetailsDto {
    id!: string | null;
    name!: string | null;
    companySize?: string | null;
    country!: string | null;
    localization!: string | null;

    constructor(data?: IOrganizationDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.companySize = _data["companySize"];
            this.country = _data["country"];
            this.localization = _data["localization"];
        }
    }

    static fromJS(data: any): OrganizationDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["companySize"] = this.companySize;
        data["country"] = this.country;
        data["localization"] = this.localization;
        return data;
    }
}

export interface IOrganizationDetailsDto {
    id: string | null;
    name: string | null;
    companySize?: string | null;
    country: string | null;
    localization: string | null;
}

export class OverrideDto implements IOverrideDto {
    id?: string;
    entityId?: string;
    organizationId?: string;
    entityType?: OverrideEntityType;
    key?: string | null;
    value?: string | null;

    constructor(data?: IOverrideDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.entityId = _data["entityId"];
            this.organizationId = _data["organizationId"];
            this.entityType = _data["entityType"];
            this.key = _data["key"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): OverrideDto {
        data = typeof data === 'object' ? data : {};
        let result = new OverrideDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["entityId"] = this.entityId;
        data["organizationId"] = this.organizationId;
        data["entityType"] = this.entityType;
        data["key"] = this.key;
        data["value"] = this.value;
        return data;
    }
}

export interface IOverrideDto {
    id?: string;
    entityId?: string;
    organizationId?: string;
    entityType?: OverrideEntityType;
    key?: string | null;
    value?: string | null;
}

export class OverrideDtoActionResult implements IOverrideDtoActionResult {
    result?: ActionResult;
    value?: OverrideDto;

    constructor(data?: IOverrideDtoActionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ActionResult.fromJS(_data["result"]) : <any>null;
            this.value = _data["value"] ? OverrideDto.fromJS(_data["value"]) : <any>null;
        }
    }

    static fromJS(data: any): OverrideDtoActionResult {
        data = typeof data === 'object' ? data : {};
        let result = new OverrideDtoActionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : this.result;
        data["value"] = this.value ? this.value.toJSON() : this.value;
        return data;
    }
}

export interface IOverrideDtoActionResult {
    result?: ActionResult;
    value?: OverrideDto;
}

export enum OverrideEntityType {
    Action = "Action",
    Dashboard = "Dashboard",
    Field = "Field",
    LayoutDefinition = "LayoutDefinition",
    LayoutParameter = "LayoutParameter",
    Menu = "Menu",
    Module = "Module",
    ModuleButtons = "ModuleButtons",
    SearchExp = "SearchExp",
    Section = "Section",
    Widget = "Widget",
}

export class PaymentGatewayDto implements IPaymentGatewayDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    gatewayType?: PaymentGatewayType;
    description?: string | null;
    prodMode?: boolean;
    authenticationDetails?: string | null;

    constructor(data?: IPaymentGatewayDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>null;
            this.createdBy = _data["createdBy"];
            this.updatedBy = _data["updatedBy"];
            this.gatewayType = _data["gatewayType"];
            this.description = _data["description"];
            this.prodMode = _data["prodMode"];
            this.authenticationDetails = _data["authenticationDetails"];
        }
    }

    static fromJS(data: any): PaymentGatewayDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentGatewayDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createDate"] = this.createDate && this.createDate.toISOString();
        data["updateDate"] = this.updateDate && this.updateDate.toISOString();
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["gatewayType"] = this.gatewayType;
        data["description"] = this.description;
        data["prodMode"] = this.prodMode;
        data["authenticationDetails"] = this.authenticationDetails;
        return data;
    }
}

export interface IPaymentGatewayDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    gatewayType?: PaymentGatewayType;
    description?: string | null;
    prodMode?: boolean;
    authenticationDetails?: string | null;
}

export enum PaymentGatewayType {
    Square = "square",
    Paypal = "paypal",
}

export enum PaymentRequestStatus {
    Failed = "failed",
    Success = "success",
}

export enum PaymentRequestType {
    GenerateURL = "GenerateURL",
    Pay = "Pay",
}

export class PaymentRequestsDto implements IPaymentRequestsDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    gatewayId?: string | null;
    documnetType?: DocumentType;
    amount?: number;
    currency?: string | null;
    description?: string | null;
    numAtCard?: string | null;
    docNum?: string | null;
    response?: string | null;
    requestType?: PaymentRequestType;
    requestStatus?: PaymentRequestStatus;

    constructor(data?: IPaymentRequestsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>null;
            this.createdBy = _data["createdBy"];
            this.updatedBy = _data["updatedBy"];
            this.gatewayId = _data["gatewayId"];
            this.documnetType = _data["documnetType"];
            this.amount = _data["amount"];
            this.currency = _data["currency"];
            this.description = _data["description"];
            this.numAtCard = _data["numAtCard"];
            this.docNum = _data["docNum"];
            this.response = _data["response"];
            this.requestType = _data["requestType"];
            this.requestStatus = _data["requestStatus"];
        }
    }

    static fromJS(data: any): PaymentRequestsDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentRequestsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createDate"] = this.createDate && this.createDate.toISOString();
        data["updateDate"] = this.updateDate && this.updateDate.toISOString();
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["gatewayId"] = this.gatewayId;
        data["documnetType"] = this.documnetType;
        data["amount"] = this.amount;
        data["currency"] = this.currency;
        data["description"] = this.description;
        data["numAtCard"] = this.numAtCard;
        data["docNum"] = this.docNum;
        data["response"] = this.response;
        data["requestType"] = this.requestType;
        data["requestStatus"] = this.requestStatus;
        return data;
    }
}

export interface IPaymentRequestsDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    gatewayId?: string | null;
    documnetType?: DocumentType;
    amount?: number;
    currency?: string | null;
    description?: string | null;
    numAtCard?: string | null;
    docNum?: string | null;
    response?: string | null;
    requestType?: PaymentRequestType;
    requestStatus?: PaymentRequestStatus;
}

export class PaymentTransactionsDto implements IPaymentTransactionsDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    gatewayId?: string | null;
    transactionType?: string | null;
    transactionId?: string | null;
    amount?: number;
    currency?: string | null;
    transactionNumber?: string | null;
    source?: string | null;
    state?: string | null;
    transactionDate?: Date;
    transactionUpdateDate?: Date;

    constructor(data?: IPaymentTransactionsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>null;
            this.createdBy = _data["createdBy"];
            this.updatedBy = _data["updatedBy"];
            this.gatewayId = _data["gatewayId"];
            this.transactionType = _data["transactionType"];
            this.transactionId = _data["transactionId"];
            this.amount = _data["amount"];
            this.currency = _data["currency"];
            this.transactionNumber = _data["transactionNumber"];
            this.source = _data["source"];
            this.state = _data["state"];
            this.transactionDate = _data["transactionDate"] ? new Date(_data["transactionDate"].toString()) : <any>null;
            this.transactionUpdateDate = _data["transactionUpdateDate"] ? new Date(_data["transactionUpdateDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): PaymentTransactionsDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentTransactionsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createDate"] = this.createDate && this.createDate.toISOString();
        data["updateDate"] = this.updateDate && this.updateDate.toISOString();
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["gatewayId"] = this.gatewayId;
        data["transactionType"] = this.transactionType;
        data["transactionId"] = this.transactionId;
        data["amount"] = this.amount;
        data["currency"] = this.currency;
        data["transactionNumber"] = this.transactionNumber;
        data["source"] = this.source;
        data["state"] = this.state;
        data["transactionDate"] = this.transactionDate && this.transactionDate.toISOString();
        data["transactionUpdateDate"] = this.transactionUpdateDate && this.transactionUpdateDate.toISOString();
        return data;
    }
}

export interface IPaymentTransactionsDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    gatewayId?: string | null;
    transactionType?: string | null;
    transactionId?: string | null;
    amount?: number;
    currency?: string | null;
    transactionNumber?: string | null;
    source?: string | null;
    state?: string | null;
    transactionDate?: Date;
    transactionUpdateDate?: Date;
}

export class PaymentTransactionsDtoQueryResponse implements IPaymentTransactionsDtoQueryResponse {
    data?: PaymentTransactionsDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;

    constructor(data?: IPaymentTransactionsDtoQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PaymentTransactionsDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.queryPayload = _data["queryPayload"] ? QueryPayload.fromJS(_data["queryPayload"]) : <any>null;
        }
    }

    static fromJS(data: any): PaymentTransactionsDtoQueryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentTransactionsDtoQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["queryPayload"] = this.queryPayload ? this.queryPayload.toJSON() : this.queryPayload;
        return data;
    }
}

export interface IPaymentTransactionsDtoQueryResponse {
    data?: PaymentTransactionsDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;
}

export class QueryPayload implements IQueryPayload {
    pageNumber?: number;
    pageSize?: number;
    readonly totalCount?: number;
    sort?: Sort;
    filter?: FilterGroup;

    constructor(data?: IQueryPayload) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            (<any>this).totalCount = _data["totalCount"];
            this.sort = _data["sort"] ? Sort.fromJS(_data["sort"]) : <any>null;
            this.filter = _data["filter"] ? FilterGroup.fromJS(_data["filter"]) : <any>null;
        }
    }

    static fromJS(data: any): QueryPayload {
        data = typeof data === 'object' ? data : {};
        let result = new QueryPayload();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        data["sort"] = this.sort ? this.sort.toJSON() : this.sort;
        data["filter"] = this.filter ? this.filter.toJSON() : this.filter;
        return data;
    }
}

export interface IQueryPayload {
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    sort?: Sort;
    filter?: FilterGroup;
}

export class RefreshTokenPayload implements IRefreshTokenPayload {
    refreshToken!: string | null;
    token!: string | null;

    constructor(data?: IRefreshTokenPayload) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.refreshToken = _data["refreshToken"];
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): RefreshTokenPayload {
        data = typeof data === 'object' ? data : {};
        let result = new RefreshTokenPayload();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["refreshToken"] = this.refreshToken;
        data["token"] = this.token;
        return data;
    }
}

export interface IRefreshTokenPayload {
    refreshToken: string | null;
    token: string | null;
}

export class RegisterNewOrganizationDto implements IRegisterNewOrganizationDto {
    name!: string;
    companySize!: string;
    countryCode!: string;
    localization!: string;
    identifier!: string;

    constructor(data?: IRegisterNewOrganizationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.companySize = _data["companySize"];
            this.countryCode = _data["countryCode"];
            this.localization = _data["localization"];
            this.identifier = _data["identifier"];
        }
    }

    static fromJS(data: any): RegisterNewOrganizationDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterNewOrganizationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["companySize"] = this.companySize;
        data["countryCode"] = this.countryCode;
        data["localization"] = this.localization;
        data["identifier"] = this.identifier;
        return data;
    }
}

export interface IRegisterNewOrganizationDto {
    name: string;
    companySize: string;
    countryCode: string;
    localization: string;
    identifier: string;
}

export class RegisterUserDto implements IRegisterUserDto {
    confirmationCode!: string;
    email!: string;
    password!: string;
    firstName!: string;
    middleName?: string | null;
    lastName!: string;

    constructor(data?: IRegisterUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.confirmationCode = _data["confirmationCode"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.lastName = _data["lastName"];
        }
    }

    static fromJS(data: any): RegisterUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["confirmationCode"] = this.confirmationCode;
        data["email"] = this.email;
        data["password"] = this.password;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["lastName"] = this.lastName;
        return data;
    }
}

export interface IRegisterUserDto {
    confirmationCode: string;
    email: string;
    password: string;
    firstName: string;
    middleName?: string | null;
    lastName: string;
}

export class ResetPassword implements IResetPassword {
    email!: string;
    password!: string;
    confirmationCode!: string;

    constructor(data?: IResetPassword) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
            this.confirmationCode = _data["confirmationCode"];
        }
    }

    static fromJS(data: any): ResetPassword {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPassword();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        data["confirmationCode"] = this.confirmationCode;
        return data;
    }
}

export interface IResetPassword {
    email: string;
    password: string;
    confirmationCode: string;
}

export class ResetPasswordConfirmation implements IResetPasswordConfirmation {
    email!: string;
    confirmationCode!: string;

    constructor(data?: IResetPasswordConfirmation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.confirmationCode = _data["confirmationCode"];
        }
    }

    static fromJS(data: any): ResetPasswordConfirmation {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordConfirmation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["confirmationCode"] = this.confirmationCode;
        return data;
    }
}

export interface IResetPasswordConfirmation {
    email: string;
    confirmationCode: string;
}

export class ResetPasswordRequest implements IResetPasswordRequest {
    email!: string;

    constructor(data?: IResetPasswordRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): ResetPasswordRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        return data;
    }
}

export interface IResetPasswordRequest {
    email: string;
}

export class RoleDto implements IRoleDto {
    id?: string | null;
    name?: string | null;

    constructor(data?: IRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): RoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IRoleDto {
    id?: string | null;
    name?: string | null;
}

export class RouteDto implements IRouteDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    seriesNumber?: string | null;
    seriesId?: string | null;
    consignments?: ConsignmentDto[] | null;
    consignmentsIds?: string[] | null;
    date?: Date;
    warehouseId?: string;
    warehouse?: WarehouseDto;
    details?: string | null;
    status?: RouteStatus;
    employeeId?: string;
    employee?: EmployeeDto;
    vehicleId?: string;
    vehicle?: VehicleDto;
    returnToStart?: boolean;

    constructor(data?: IRouteDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>null;
            this.createdBy = _data["createdBy"];
            this.updatedBy = _data["updatedBy"];
            this.seriesNumber = _data["seriesNumber"];
            this.seriesId = _data["seriesId"];
            if (Array.isArray(_data["consignments"])) {
                this.consignments = [] as any;
                for (let item of _data["consignments"])
                    this.consignments!.push(ConsignmentDto.fromJS(item));
            }
            if (Array.isArray(_data["consignmentsIds"])) {
                this.consignmentsIds = [] as any;
                for (let item of _data["consignmentsIds"])
                    this.consignmentsIds!.push(item);
            }
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>null;
            this.warehouseId = _data["warehouseId"];
            this.warehouse = _data["warehouse"] ? WarehouseDto.fromJS(_data["warehouse"]) : <any>null;
            this.details = _data["details"];
            this.status = _data["status"];
            this.employeeId = _data["employeeId"];
            this.employee = _data["employee"] ? EmployeeDto.fromJS(_data["employee"]) : <any>null;
            this.vehicleId = _data["vehicleId"];
            this.vehicle = _data["vehicle"] ? VehicleDto.fromJS(_data["vehicle"]) : <any>null;
            this.returnToStart = _data["returnToStart"];
        }
    }

    static fromJS(data: any): RouteDto {
        data = typeof data === 'object' ? data : {};
        let result = new RouteDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createDate"] = this.createDate && this.createDate.toISOString();
        data["updateDate"] = this.updateDate && this.updateDate.toISOString();
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["seriesNumber"] = this.seriesNumber;
        data["seriesId"] = this.seriesId;
        if (Array.isArray(this.consignments)) {
            data["consignments"] = [];
            for (let item of this.consignments)
                data["consignments"].push(item.toJSON());
        }
        if (Array.isArray(this.consignmentsIds)) {
            data["consignmentsIds"] = [];
            for (let item of this.consignmentsIds)
                data["consignmentsIds"].push(item);
        }
        data["date"] = this.date && this.date.toISOString();
        data["warehouseId"] = this.warehouseId;
        data["warehouse"] = this.warehouse ? this.warehouse.toJSON() : this.warehouse;
        data["details"] = this.details;
        data["status"] = this.status;
        data["employeeId"] = this.employeeId;
        data["employee"] = this.employee ? this.employee.toJSON() : this.employee;
        data["vehicleId"] = this.vehicleId;
        data["vehicle"] = this.vehicle ? this.vehicle.toJSON() : this.vehicle;
        data["returnToStart"] = this.returnToStart;
        return data;
    }
}

export interface IRouteDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    seriesNumber?: string | null;
    seriesId?: string | null;
    consignments?: ConsignmentDto[] | null;
    consignmentsIds?: string[] | null;
    date?: Date;
    warehouseId?: string;
    warehouse?: WarehouseDto;
    details?: string | null;
    status?: RouteStatus;
    employeeId?: string;
    employee?: EmployeeDto;
    vehicleId?: string;
    vehicle?: VehicleDto;
    returnToStart?: boolean;
}

export class RouteDtoQueryResponse implements IRouteDtoQueryResponse {
    data?: RouteDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;

    constructor(data?: IRouteDtoQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RouteDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.queryPayload = _data["queryPayload"] ? QueryPayload.fromJS(_data["queryPayload"]) : <any>null;
        }
    }

    static fromJS(data: any): RouteDtoQueryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RouteDtoQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["queryPayload"] = this.queryPayload ? this.queryPayload.toJSON() : this.queryPayload;
        return data;
    }
}

export interface IRouteDtoQueryResponse {
    data?: RouteDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;
}

 
export enum ScopeType {
    Global = "Global",
    Role = "Role",
}

export class SearchExpDto implements ISearchExpDto {
    roles?: string | null;
    moduleId?: string;
    isExpression?: boolean;
    dataType?: FieldDataType;
    fieldName?: string | null;
    dataSourceId?: string | null;
    active?: boolean | null;
    dataSource?: DataSourceDto;

    constructor(data?: ISearchExpDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roles = _data["roles"];
            this.moduleId = _data["moduleId"];
            this.isExpression = _data["isExpression"];
            this.dataType = _data["dataType"];
            this.fieldName = _data["fieldName"];
            this.dataSourceId = _data["dataSourceId"];
            this.active = _data["active"];
            this.dataSource = _data["dataSource"] ? DataSourceDto.fromJS(_data["dataSource"]) : <any>null;
        }
    }

    static fromJS(data: any): SearchExpDto {
        data = typeof data === 'object' ? data : {};
        let result = new SearchExpDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roles"] = this.roles;
        data["moduleId"] = this.moduleId;
        data["isExpression"] = this.isExpression;
        data["dataType"] = this.dataType;
        data["fieldName"] = this.fieldName;
        data["dataSourceId"] = this.dataSourceId;
        data["active"] = this.active;
        data["dataSource"] = this.dataSource ? this.dataSource.toJSON() : this.dataSource;
        return data;
    }
}

export interface ISearchExpDto {
    roles?: string | null;
    moduleId?: string;
    isExpression?: boolean;
    dataType?: FieldDataType;
    fieldName?: string | null;
    dataSourceId?: string | null;
    active?: boolean | null;
    dataSource?: DataSourceDto;
}

export class SectionAdditionalInformation implements ISectionAdditionalInformation {
    hidden?: boolean;
    isInDrawer?: boolean;
    enableFilter?: boolean;
    enablePaging?: boolean;
    defaultPageSize?: number;
    isCounterSpecial?: boolean;
    flexibleWidth?: boolean;
    defaultColumnWidth?: number;
    additionalCSS?: string | null;
    isGhost?: boolean;
    fixedHeader?: boolean;
    tableFixedHeight?: number;
    counterAfter?: number;
    counterTitle?: string | null;
    counterTemplate?: string | null;
    tabGroupIcon?: string | null;
    tabGroupTitle?: string | null;
    tabGroupButtonColor?: string | null;
    tabGroupButtonInHeader?: boolean;
    enablePlusButtonForResponsive?: boolean;
    trimTextCellIfGreaterThanLimit?: boolean;
    cellTextLimit?: number;
    visibleColumnsInMobile?: number;
    visibleColumnsInPad?: number;
    ignoreOnUpdate?: boolean;
    allowDelete?: boolean;
    allowAdd?: boolean;
    allowAddInEditMode?: boolean;
    allowDuplicate?: boolean;
    allowAddTextRow?: boolean;
    allowSpecialLines?: boolean;
    allowLineSorting?: boolean;
    allowScan?: boolean;
    executeQueryEvenWhenAdd?: boolean;
    showSectionInAddMode?: boolean;
    labelVertical?: boolean;
    counterVisible?: boolean;
    actionAtTheBegning?: boolean;
    buttons?: SectionButton[] | null;
    verticalView?: boolean;
    showOnCreationInside?: boolean;
    titleFormat?: string | null;
    withMap?: boolean;
    disableSorting?: boolean;
    titleFormatHandlebars?: string | null;
    lineTemplate?: string | null;
    renderAsTemplateByDefault?: boolean;
    collapseInOnMobile?: boolean;
    adjustColumnSettingsBasedOnQuery?: boolean;
    maxIndexQuery?: string | null;
    isCustomData?: boolean;
    customDataSource?: string | null;
    quantityFieldPropertyName?: string | null;

    constructor(data?: ISectionAdditionalInformation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hidden = _data["hidden"];
            this.isInDrawer = _data["isInDrawer"];
            this.enableFilter = _data["enableFilter"];
            this.enablePaging = _data["enablePaging"];
            this.defaultPageSize = _data["defaultPageSize"];
            this.isCounterSpecial = _data["isCounterSpecial"];
            this.flexibleWidth = _data["flexibleWidth"];
            this.defaultColumnWidth = _data["defaultColumnWidth"];
            this.additionalCSS = _data["additionalCSS"];
            this.isGhost = _data["isGhost"];
            this.fixedHeader = _data["fixedHeader"];
            this.tableFixedHeight = _data["tableFixedHeight"];
            this.counterAfter = _data["counterAfter"];
            this.counterTitle = _data["counterTitle"];
            this.counterTemplate = _data["counterTemplate"];
            this.tabGroupIcon = _data["tabGroupIcon"];
            this.tabGroupTitle = _data["tabGroupTitle"];
            this.tabGroupButtonColor = _data["tabGroupButtonColor"];
            this.tabGroupButtonInHeader = _data["tabGroupButtonInHeader"];
            this.enablePlusButtonForResponsive = _data["enablePlusButtonForResponsive"];
            this.trimTextCellIfGreaterThanLimit = _data["trimTextCellIfGreaterThanLimit"];
            this.cellTextLimit = _data["cellTextLimit"];
            this.visibleColumnsInMobile = _data["visibleColumnsInMobile"];
            this.visibleColumnsInPad = _data["visibleColumnsInPad"];
            this.ignoreOnUpdate = _data["ignoreOnUpdate"];
            this.allowDelete = _data["allowDelete"];
            this.allowAdd = _data["allowAdd"];
            this.allowAddInEditMode = _data["allowAddInEditMode"];
            this.allowDuplicate = _data["allowDuplicate"];
            this.allowAddTextRow = _data["allowAddTextRow"];
            this.allowSpecialLines = _data["allowSpecialLines"];
            this.allowLineSorting = _data["allowLineSorting"];
            this.allowScan = _data["allowScan"];
            this.executeQueryEvenWhenAdd = _data["executeQueryEvenWhenAdd"];
            this.showSectionInAddMode = _data["showSectionInAddMode"];
            this.labelVertical = _data["labelVertical"];
            this.counterVisible = _data["counterVisible"];
            this.actionAtTheBegning = _data["actionAtTheBegning"];
            if (Array.isArray(_data["buttons"])) {
                this.buttons = [] as any;
                for (let item of _data["buttons"])
                    this.buttons!.push(SectionButton.fromJS(item));
            }
            this.verticalView = _data["verticalView"];
            this.showOnCreationInside = _data["showOnCreationInside"];
            this.titleFormat = _data["titleFormat"];
            this.withMap = _data["withMap"];
            this.disableSorting = _data["disableSorting"];
            this.titleFormatHandlebars = _data["titleFormatHandlebars"];
            this.lineTemplate = _data["lineTemplate"];
            this.renderAsTemplateByDefault = _data["renderAsTemplateByDefault"];
            this.collapseInOnMobile = _data["collapseInOnMobile"];
            this.adjustColumnSettingsBasedOnQuery = _data["adjustColumnSettingsBasedOnQuery"];
            this.maxIndexQuery = _data["maxIndexQuery"];
            this.isCustomData = _data["isCustomData"];
            this.customDataSource = _data["customDataSource"];
            this.quantityFieldPropertyName = _data["quantityFieldPropertyName"];
        }
    }

    static fromJS(data: any): SectionAdditionalInformation {
        data = typeof data === 'object' ? data : {};
        let result = new SectionAdditionalInformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hidden"] = this.hidden;
        data["isInDrawer"] = this.isInDrawer;
        data["enableFilter"] = this.enableFilter;
        data["enablePaging"] = this.enablePaging;
        data["defaultPageSize"] = this.defaultPageSize;
        data["isCounterSpecial"] = this.isCounterSpecial;
        data["flexibleWidth"] = this.flexibleWidth;
        data["defaultColumnWidth"] = this.defaultColumnWidth;
        data["additionalCSS"] = this.additionalCSS;
        data["isGhost"] = this.isGhost;
        data["fixedHeader"] = this.fixedHeader;
        data["tableFixedHeight"] = this.tableFixedHeight;
        data["counterAfter"] = this.counterAfter;
        data["counterTitle"] = this.counterTitle;
        data["counterTemplate"] = this.counterTemplate;
        data["tabGroupIcon"] = this.tabGroupIcon;
        data["tabGroupTitle"] = this.tabGroupTitle;
        data["tabGroupButtonColor"] = this.tabGroupButtonColor;
        data["tabGroupButtonInHeader"] = this.tabGroupButtonInHeader;
        data["enablePlusButtonForResponsive"] = this.enablePlusButtonForResponsive;
        data["trimTextCellIfGreaterThanLimit"] = this.trimTextCellIfGreaterThanLimit;
        data["cellTextLimit"] = this.cellTextLimit;
        data["visibleColumnsInMobile"] = this.visibleColumnsInMobile;
        data["visibleColumnsInPad"] = this.visibleColumnsInPad;
        data["ignoreOnUpdate"] = this.ignoreOnUpdate;
        data["allowDelete"] = this.allowDelete;
        data["allowAdd"] = this.allowAdd;
        data["allowAddInEditMode"] = this.allowAddInEditMode;
        data["allowDuplicate"] = this.allowDuplicate;
        data["allowAddTextRow"] = this.allowAddTextRow;
        data["allowSpecialLines"] = this.allowSpecialLines;
        data["allowLineSorting"] = this.allowLineSorting;
        data["allowScan"] = this.allowScan;
        data["executeQueryEvenWhenAdd"] = this.executeQueryEvenWhenAdd;
        data["showSectionInAddMode"] = this.showSectionInAddMode;
        data["labelVertical"] = this.labelVertical;
        data["counterVisible"] = this.counterVisible;
        data["actionAtTheBegning"] = this.actionAtTheBegning;
        if (Array.isArray(this.buttons)) {
            data["buttons"] = [];
            for (let item of this.buttons)
                data["buttons"].push(item.toJSON());
        }
        data["verticalView"] = this.verticalView;
        data["showOnCreationInside"] = this.showOnCreationInside;
        data["titleFormat"] = this.titleFormat;
        data["withMap"] = this.withMap;
        data["disableSorting"] = this.disableSorting;
        data["titleFormatHandlebars"] = this.titleFormatHandlebars;
        data["lineTemplate"] = this.lineTemplate;
        data["renderAsTemplateByDefault"] = this.renderAsTemplateByDefault;
        data["collapseInOnMobile"] = this.collapseInOnMobile;
        data["adjustColumnSettingsBasedOnQuery"] = this.adjustColumnSettingsBasedOnQuery;
        data["maxIndexQuery"] = this.maxIndexQuery;
        data["isCustomData"] = this.isCustomData;
        data["customDataSource"] = this.customDataSource;
        data["quantityFieldPropertyName"] = this.quantityFieldPropertyName;
        return data;
    }
}

export interface ISectionAdditionalInformation {
    hidden?: boolean;
    isInDrawer?: boolean;
    enableFilter?: boolean;
    enablePaging?: boolean;
    defaultPageSize?: number;
    isCounterSpecial?: boolean;
    flexibleWidth?: boolean;
    defaultColumnWidth?: number;
    additionalCSS?: string | null;
    isGhost?: boolean;
    fixedHeader?: boolean;
    tableFixedHeight?: number;
    counterAfter?: number;
    counterTitle?: string | null;
    counterTemplate?: string | null;
    tabGroupIcon?: string | null;
    tabGroupTitle?: string | null;
    tabGroupButtonColor?: string | null;
    tabGroupButtonInHeader?: boolean;
    enablePlusButtonForResponsive?: boolean;
    trimTextCellIfGreaterThanLimit?: boolean;
    cellTextLimit?: number;
    visibleColumnsInMobile?: number;
    visibleColumnsInPad?: number;
    ignoreOnUpdate?: boolean;
    allowDelete?: boolean;
    allowAdd?: boolean;
    allowAddInEditMode?: boolean;
    allowDuplicate?: boolean;
    allowAddTextRow?: boolean;
    allowSpecialLines?: boolean;
    allowLineSorting?: boolean;
    allowScan?: boolean;
    executeQueryEvenWhenAdd?: boolean;
    showSectionInAddMode?: boolean;
    labelVertical?: boolean;
    counterVisible?: boolean;
    actionAtTheBegning?: boolean;
    buttons?: SectionButton[] | null;
    verticalView?: boolean;
    showOnCreationInside?: boolean;
    titleFormat?: string | null;
    withMap?: boolean;
    disableSorting?: boolean;
    titleFormatHandlebars?: string | null;
    lineTemplate?: string | null;
    renderAsTemplateByDefault?: boolean;
    collapseInOnMobile?: boolean;
    adjustColumnSettingsBasedOnQuery?: boolean;
    maxIndexQuery?: string | null;
    isCustomData?: boolean;
    customDataSource?: string | null;
    quantityFieldPropertyName?: string | null;
}

export class SectionButton implements ISectionButton {
    label?: string | null;
    icon?: string | null;
    cssClass?: string | null;
    onClick?: string | null;

    constructor(data?: ISectionButton) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.label = _data["label"];
            this.icon = _data["icon"];
            this.cssClass = _data["cssClass"];
            this.onClick = _data["onClick"];
        }
    }

    static fromJS(data: any): SectionButton {
        data = typeof data === 'object' ? data : {};
        let result = new SectionButton();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["icon"] = this.icon;
        data["cssClass"] = this.cssClass;
        data["onClick"] = this.onClick;
        return data;
    }
}

export interface ISectionButton {
    label?: string | null;
    icon?: string | null;
    cssClass?: string | null;
    onClick?: string | null;
}



export interface ISectionDto {
    id?: string;
    localizations?: string | null;
    areas?: string | null;
    isSystem?: boolean;
    organizationId?: string;
    roles?: string | null;
    moduleId?: string | null;
    dataSourceId?: string | null;
    xmlTagName?: string | null;
    title?: string | null;
    type?: SectionType;
    sortOrder?: number | null;
    additionalIdentifier?: string | null;
    tabGroup?: string | null;
    icon?: string | null;
    disabled?: boolean | null;
    columnSettingsParsed?: ColumnSetting[] | null;
    additionalInformationParsed?: SectionAdditionalInformation;
    dataSource?: DataSourceDto;
    fields?: FieldDto[] | null;
}



export class SeriesDto implements ISeriesDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    name?: string | null;
    entityType?: EntityType;
    prefix?: string | null;
    suffix?: string | null;
    numberOfDigits?: number;
    firstNumber?: number;
    nextNumber?: number;
    lastNumber?: number;
    isActive?: boolean;
    isManual?: boolean;
    isDefault?: boolean;

    constructor(data?: ISeriesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>null;
            this.createdBy = _data["createdBy"];
            this.updatedBy = _data["updatedBy"];
            this.name = _data["name"];
            this.entityType = _data["entityType"];
            this.prefix = _data["prefix"];
            this.suffix = _data["suffix"];
            this.numberOfDigits = _data["numberOfDigits"];
            this.firstNumber = _data["firstNumber"];
            this.nextNumber = _data["nextNumber"];
            this.lastNumber = _data["lastNumber"];
            this.isActive = _data["isActive"];
            this.isManual = _data["isManual"];
            this.isDefault = _data["isDefault"];
        }
    }

    static fromJS(data: any): SeriesDto {
        data = typeof data === 'object' ? data : {};
        let result = new SeriesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createDate"] = this.createDate && this.createDate.toISOString();
        data["updateDate"] = this.updateDate && this.updateDate.toISOString();
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["name"] = this.name;
        data["entityType"] = this.entityType;
        data["prefix"] = this.prefix;
        data["suffix"] = this.suffix;
        data["numberOfDigits"] = this.numberOfDigits;
        data["firstNumber"] = this.firstNumber;
        data["nextNumber"] = this.nextNumber;
        data["lastNumber"] = this.lastNumber;
        data["isActive"] = this.isActive;
        data["isManual"] = this.isManual;
        data["isDefault"] = this.isDefault;
        return data;
    }
}

export interface ISeriesDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    name?: string | null;
    entityType?: EntityType;
    prefix?: string | null;
    suffix?: string | null;
    numberOfDigits?: number;
    firstNumber?: number;
    nextNumber?: number;
    lastNumber?: number;
    isActive?: boolean;
    isManual?: boolean;
    isDefault?: boolean;
}

export class SeriesDtoQueryResponse implements ISeriesDtoQueryResponse {
    data?: SeriesDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;

    constructor(data?: ISeriesDtoQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SeriesDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.queryPayload = _data["queryPayload"] ? QueryPayload.fromJS(_data["queryPayload"]) : <any>null;
        }
    }

    static fromJS(data: any): SeriesDtoQueryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SeriesDtoQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["queryPayload"] = this.queryPayload ? this.queryPayload.toJSON() : this.queryPayload;
        return data;
    }
}

export interface ISeriesDtoQueryResponse {
    data?: SeriesDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;
}

export class Sort implements ISort {
    sortBy?: string | null;
    ascending?: boolean;

    constructor(data?: ISort) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sortBy = _data["sortBy"];
            this.ascending = _data["ascending"];
        }
    }

    static fromJS(data: any): Sort {
        data = typeof data === 'object' ? data : {};
        let result = new Sort();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sortBy"] = this.sortBy;
        data["ascending"] = this.ascending;
        return data;
    }
}

export interface ISort {
    sortBy?: string | null;
    ascending?: boolean;
}

export class StorageSystemDto implements IStorageSystemDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    type?: StorageSystemType;
    storageSystemName?: string | null;
    configuration?: string | null;

    constructor(data?: IStorageSystemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>null;
            this.createdBy = _data["createdBy"];
            this.updatedBy = _data["updatedBy"];
            this.type = _data["type"];
            this.storageSystemName = _data["storageSystemName"];
            this.configuration = _data["configuration"];
        }
    }

    static fromJS(data: any): StorageSystemDto {
        data = typeof data === 'object' ? data : {};
        let result = new StorageSystemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createDate"] = this.createDate && this.createDate.toISOString();
        data["updateDate"] = this.updateDate && this.updateDate.toISOString();
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["type"] = this.type;
        data["storageSystemName"] = this.storageSystemName;
        data["configuration"] = this.configuration;
        return data;
    }
}

export interface IStorageSystemDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    type?: StorageSystemType;
    storageSystemName?: string | null;
    configuration?: string | null;
}

export class StorageSystemDtoQueryResponse implements IStorageSystemDtoQueryResponse {
    data?: StorageSystemDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;

    constructor(data?: IStorageSystemDtoQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(StorageSystemDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.queryPayload = _data["queryPayload"] ? QueryPayload.fromJS(_data["queryPayload"]) : <any>null;
        }
    }

    static fromJS(data: any): StorageSystemDtoQueryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new StorageSystemDtoQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["queryPayload"] = this.queryPayload ? this.queryPayload.toJSON() : this.queryPayload;
        return data;
    }
}

export interface IStorageSystemDtoQueryResponse {
    data?: StorageSystemDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;
}

export enum StorageSystemType {
    LocalStorage = "LocalStorage",
    AmazonS3 = "AmazonS3",
    AzureBlob = "AzureBlob",
}

export enum TotalsInListType {
    Sum = "Sum",
    Average = "Average",
}

export class UpdateUserDto implements IUpdateUserDto {
    email?: string | null;
    firstName?: string | null;
    middleName?: string | null;
    lastName?: string | null;

    constructor(data?: IUpdateUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.lastName = _data["lastName"];
        }
    }

    static fromJS(data: any): UpdateUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["lastName"] = this.lastName;
        return data;
    }
}

export interface IUpdateUserDto {
    email?: string | null;
    firstName?: string | null;
    middleName?: string | null;
    lastName?: string | null;
}

export class UserListDto implements IUserListDto {
    name?: string | null;
    email?: string | null;
    role?: string | null;

    constructor(data?: IUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.email = _data["email"];
            this.role = _data["role"];
        }
    }

    static fromJS(data: any): UserListDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["email"] = this.email;
        data["role"] = this.role;
        return data;
    }
}

export interface IUserListDto {
    name?: string | null;
    email?: string | null;
    role?: string | null;
}

export class UserWithOrgDetailsDto implements IUserWithOrgDetailsDto {
    id?: string | null;
    email?: string | null;
    firstName?: string | null;
    middleName?: string | null;
    lastName?: string | null;
    organizationId?: string | null;
    organizationName?: string | null;

    constructor(data?: IUserWithOrgDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.lastName = _data["lastName"];
            this.organizationId = _data["organizationId"];
            this.organizationName = _data["organizationName"];
        }
    }

    static fromJS(data: any): UserWithOrgDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserWithOrgDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["lastName"] = this.lastName;
        data["organizationId"] = this.organizationId;
        data["organizationName"] = this.organizationName;
        return data;
    }
}

export interface IUserWithOrgDetailsDto {
    id?: string | null;
    email?: string | null;
    firstName?: string | null;
    middleName?: string | null;
    lastName?: string | null;
    organizationId?: string | null;
    organizationName?: string | null;
}

export class VehicleDto implements IVehicleDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    name?: string | null;
    description?: string | null;
    status?: string | null;

    constructor(data?: IVehicleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>null;
            this.createdBy = _data["createdBy"];
            this.updatedBy = _data["updatedBy"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): VehicleDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createDate"] = this.createDate && this.createDate.toISOString();
        data["updateDate"] = this.updateDate && this.updateDate.toISOString();
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["name"] = this.name;
        data["description"] = this.description;
        data["status"] = this.status;
        return data;
    }
}

export interface IVehicleDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    name?: string | null;
    description?: string | null;
    status?: string | null;
}

export class VehicleDtoQueryResponse implements IVehicleDtoQueryResponse {
    data?: VehicleDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;

    constructor(data?: IVehicleDtoQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(VehicleDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.queryPayload = _data["queryPayload"] ? QueryPayload.fromJS(_data["queryPayload"]) : <any>null;
        }
    }

    static fromJS(data: any): VehicleDtoQueryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDtoQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["queryPayload"] = this.queryPayload ? this.queryPayload.toJSON() : this.queryPayload;
        return data;
    }
}

export interface IVehicleDtoQueryResponse {
    data?: VehicleDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;
}

export class WarehouseDto implements IWarehouseDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    code?: string | null;
    name?: string | null;
    type?: WarehouseType;
    address?: string | null;
    longitude?: number;
    latitude?: number;
    isValidAddress?: boolean;

    constructor(data?: IWarehouseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>null;
            this.createdBy = _data["createdBy"];
            this.updatedBy = _data["updatedBy"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.address = _data["address"];
            this.longitude = _data["longitude"];
            this.latitude = _data["latitude"];
            this.isValidAddress = _data["isValidAddress"];
        }
    }

    static fromJS(data: any): WarehouseDto {
        data = typeof data === 'object' ? data : {};
        let result = new WarehouseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createDate"] = this.createDate && this.createDate.toISOString();
        data["updateDate"] = this.updateDate && this.updateDate.toISOString();
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["code"] = this.code;
        data["name"] = this.name;
        data["type"] = this.type;
        data["address"] = this.address;
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        data["isValidAddress"] = this.isValidAddress;
        return data;
    }
}

export interface IWarehouseDto {
    id?: string;
    createDate?: Date;
    updateDate?: Date;
    createdBy?: string;
    updatedBy?: string;
    code?: string | null;
    name?: string | null;
    type?: WarehouseType;
    address?: string | null;
    longitude?: number;
    latitude?: number;
    isValidAddress?: boolean;
}

export class WarehouseDtoQueryResponse implements IWarehouseDtoQueryResponse {
    data?: WarehouseDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;

    constructor(data?: IWarehouseDtoQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(WarehouseDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.queryPayload = _data["queryPayload"] ? QueryPayload.fromJS(_data["queryPayload"]) : <any>null;
        }
    }

    static fromJS(data: any): WarehouseDtoQueryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new WarehouseDtoQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["queryPayload"] = this.queryPayload ? this.queryPayload.toJSON() : this.queryPayload;
        return data;
    }
}

export interface IWarehouseDtoQueryResponse {
    data?: WarehouseDto[] | null;
    totalCount?: number;
    queryPayload?: QueryPayload;
}

export enum WarehouseType {
    Consignment = "Consignment",
    DropShip = "DropShip",
    BinLocation = "BinLocation",
}

export enum WarningRegexCondition {
    Match = "Match",
    NoMatch = "NoMatch",
}

export class WidgetAdditionalInformation implements IWidgetAdditionalInformation {
    displayLegend?: boolean;

    constructor(data?: IWidgetAdditionalInformation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayLegend = _data["displayLegend"];
        }
    }

    static fromJS(data: any): WidgetAdditionalInformation {
        data = typeof data === 'object' ? data : {};
        let result = new WidgetAdditionalInformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayLegend"] = this.displayLegend;
        return data;
    }
}

export interface IWidgetAdditionalInformation {
    displayLegend?: boolean;
}

export enum WidgetChartType {
    Line = "Line",
    Bar = "Bar",
    Radar = "Radar",
    PolarArea = "PolarArea",
    Pie = "Pie",
    Doughnut = "Doughnut",
    HorizontalBar = "HorizontalBar",
    Squere = "Squere",
    Table = "Table",
    Link = "Link",
    AdvancedPieChart = "AdvancedPieChart",
    CustomHtmlBlock = "CustomHtmlBlock",
    ShoppingCartProducts = "ShoppingCartProducts",
}

export class WidgetDto implements IWidgetDto {
    id?: string;
    localizations?: string | null;
    areas?: string | null;
    isSystem?: boolean;
    organizationId?: string;
    roles?: string | null;
    companyDB?: string | null;
    title?: string | null;
    sortOrder?: number | null;
    dataSourceId?: string | null;
    chartType?: WidgetChartType;
    labelColumn?: string | null;
    valueColumn?: string | null;
    active?: boolean | null;
    renderAsSquare?: boolean;
    squareDataSourceId?: string | null;
    targetLink?: string | null;
    columnSettingsParsed?: ColumnSetting[] | null;
    additionalInformationParsed?: WidgetAdditionalInformation;
    dataSource?: DataSourceDto;
    squareDataSource?: DataSourceDto;

    constructor(data?: IWidgetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.localizations = _data["localizations"];
            this.areas = _data["areas"];
            this.isSystem = _data["isSystem"];
            this.organizationId = _data["organizationId"];
            this.roles = _data["roles"];
            this.companyDB = _data["companyDB"];
            this.title = _data["title"];
            this.sortOrder = _data["sortOrder"];
            this.dataSourceId = _data["dataSourceId"];
            this.chartType = _data["chartType"];
            this.labelColumn = _data["labelColumn"];
            this.valueColumn = _data["valueColumn"];
            this.active = _data["active"];
            this.renderAsSquare = _data["renderAsSquare"];
            this.squareDataSourceId = _data["squareDataSourceId"];
            this.targetLink = _data["targetLink"];
            if (Array.isArray(_data["columnSettingsParsed"])) {
                this.columnSettingsParsed = [] as any;
                for (let item of _data["columnSettingsParsed"])
                    this.columnSettingsParsed!.push(ColumnSetting.fromJS(item));
            }
            this.additionalInformationParsed = _data["additionalInformationParsed"] ? WidgetAdditionalInformation.fromJS(_data["additionalInformationParsed"]) : <any>null;
            this.dataSource = _data["dataSource"] ? DataSourceDto.fromJS(_data["dataSource"]) : <any>null;
            this.squareDataSource = _data["squareDataSource"] ? DataSourceDto.fromJS(_data["squareDataSource"]) : <any>null;
        }
    }

    static fromJS(data: any): WidgetDto {
        data = typeof data === 'object' ? data : {};
        let result = new WidgetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["localizations"] = this.localizations;
        data["areas"] = this.areas;
        data["isSystem"] = this.isSystem;
        data["organizationId"] = this.organizationId;
        data["roles"] = this.roles;
        data["companyDB"] = this.companyDB;
        data["title"] = this.title;
        data["sortOrder"] = this.sortOrder;
        data["dataSourceId"] = this.dataSourceId;
        data["chartType"] = this.chartType;
        data["labelColumn"] = this.labelColumn;
        data["valueColumn"] = this.valueColumn;
        data["active"] = this.active;
        data["renderAsSquare"] = this.renderAsSquare;
        data["squareDataSourceId"] = this.squareDataSourceId;
        data["targetLink"] = this.targetLink;
        if (Array.isArray(this.columnSettingsParsed)) {
            data["columnSettingsParsed"] = [];
            for (let item of this.columnSettingsParsed)
                data["columnSettingsParsed"].push(item.toJSON());
        }
        data["additionalInformationParsed"] = this.additionalInformationParsed ? this.additionalInformationParsed.toJSON() : this.additionalInformationParsed;
        data["dataSource"] = this.dataSource ? this.dataSource.toJSON() : this.dataSource;
        data["squareDataSource"] = this.squareDataSource ? this.squareDataSource.toJSON() : this.squareDataSource;
        return data;
    }
}

export interface IWidgetDto {
    id?: string;
    localizations?: string | null;
    areas?: string | null;
    isSystem?: boolean;
    organizationId?: string;
    roles?: string | null;
    companyDB?: string | null;
    title?: string | null;
    sortOrder?: number | null;
    dataSourceId?: string | null;
    chartType?: WidgetChartType;
    labelColumn?: string | null;
    valueColumn?: string | null;
    active?: boolean | null;
    renderAsSquare?: boolean;
    squareDataSourceId?: string | null;
    targetLink?: string | null;
    columnSettingsParsed?: ColumnSetting[] | null;
    additionalInformationParsed?: WidgetAdditionalInformation;
    dataSource?: DataSourceDto;
    squareDataSource?: DataSourceDto;
}
//-----/CustomTypes.File-----

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

export function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

export function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

//-----/Types.File-----

import { addResultTypeFactory } from './axios-client/helpers';
export { setBaseUrl, getBaseUrl } from './axios-client/helpers';
export { setAxiosFactory, getAxios } from './axios-client/helpers';


//-----PersistorHydrator.File-----
import type { PersistedClient } from '@tanstack/react-query-persist-client';
import type { DehydratedState, QueryKey } from '@tanstack/react-query'
import { getResultTypeFactory } from './axios-client/helpers';
import { FieldDataType, FieldDto, RouteStatus, SectionDto, SectionType } from './static-axios-client';

/*
 * If you have Dates in QueryKeys (i.e. in request parameters), you need to deserialize them to Dates correctly
 * (otherwise they are deserialized as strings by default, and your queries are broken).
 */
export function deserializeDate(str: unknown) {
    if (!str || typeof str !== 'string') return str;
    if (!/^\d\d\d\d\-\d\d\-\d\d/.test(str)) return str;

    const date = new Date(str);
    const isDate = date instanceof Date && !isNaN(date as any);

    return isDate ? date : str;
}

export function deserializeDatesInQueryKeys(queryKey: QueryKey) {
    return queryKey
        // We need to replace `null` with `undefined` in query key, because
        // `undefined` is serialized as `null`.
        // And most probably if we have `null` in QueryKey it actually means `undefined`.
        // We can't keep nulls, because they have a different meaning, and e.g. boolean parameters are not allowed to be null.
        .map(x => (x === null ? undefined : x))
        .map(x => deserializeDate(x));
}

export function deserializeClassesInQueryData(queryKey: QueryKey, data: any) {
    if (!data) {
        return data;
    } else if (typeof data !== 'object') {
        return data;
    } else if ('pages' in data && 'pageParams' in data && Array.isArray(data.pages) && Array.isArray(data.pageParams)) {
        // infinite query
        data.pages = data.pages.map((page: any) => deserializeClassesInQueryData(queryKey, page));
    } else if (Array.isArray(data)) {
        return data.map(elem => constructDtoClass(queryKey, elem));
    } else {
        return constructDtoClass(queryKey, data);
    }
}

/*
 * Pass this function as `deserialize` option to createSyncStoragePersister/createAsyncStoragePersister
 * to correctly deserialize your DTOs (including Dates)
 */
export function persisterDeserialize(cache: string): PersistedClient {
    const client: PersistedClient = JSON.parse(cache);
    client.clientState.queries.forEach((query) => {
        query.state.data = deserializeClassesInQueryData(query.queryKey, query.state.data);
        query.queryKey = deserializeDatesInQueryKeys(query.queryKey);
    });

    return client;
}

export function constructDtoClass(queryKey: QueryKey, data: any): unknown {
    const resultTypeKey = getResultTypeClassKey(queryKey);
    const constructorFunction = getResultTypeFactory(resultTypeKey);

    if (!data || !constructorFunction)
        return data;

    return constructorFunction(data);
}

export function getResultTypeClassKey(queryKey: QueryKey): string {
    if (!Array.isArray(queryKey)) {
        return queryKey as unknown as string;
    }
    if (queryKey.length >= 2) {
        // We concatenate first and second elements, because they uniquely identify the query.
        // All other QueryKey elements are query parameters
        return `${queryKey[0]}___${queryKey[1]}`;
    }

    // We actually should never reach this point :)
    return queryKey.join('___');
}

export function initPersister() {

    addResultTypeFactory('Client___actionsAll', (data: any) => { const result = new ActionDto(); result.init(data); return result; });
    addResultTypeFactory('Client___actionsGET', (data: any) => { const result = new ActionDto(); result.init(data); return result; });
    addResultTypeFactory('Client___apiKeysAll', (data: any) => { const result = new ApiKeyDto(); result.init(data); return result; });
    addResultTypeFactory('Client___apiKeysGET', (data: any) => { const result = new ApiKeyDto(); result.init(data); return result; });
    addResultTypeFactory('Client___appsAll', (data: any) => { const result = new AppDto(); result.init(data); return result; });
    addResultTypeFactory('Client___appsGET', (data: any) => { const result = new AppDto(); result.init(data); return result; });
    addResultTypeFactory('Client___assets', (data: any) => { const result = new AssetDtoQueryResponse(); result.init(data); return result; });
    addResultTypeFactory('Client___assets2', (data: any) => { const result = new AssetDto(); result.init(data); return result; });
    addResultTypeFactory('Client___authorizationProfilesGET', (data: any) => { const result = new AuthorizationProfileDtoQueryResponse(); result.init(data); return result; });
    addResultTypeFactory('Client___authorizationProfilesGET2', (data: any) => { const result = new AuthorizationProfileDto(); result.init(data); return result; });
    addResultTypeFactory('Client___companiesGET', (data: any) => { const result = new CompanyDtoQueryResponse(); result.init(data); return result; });
    addResultTypeFactory('Client___companiesGET2', (data: any) => { const result = new CompanyDto(); result.init(data); return result; });
    addResultTypeFactory('Client___configurationGET', (data: any) => { const result = new ConfigurationDtoQueryResponse(); result.init(data); return result; });
    addResultTypeFactory('Client___configurationGET2', (data: any) => { const result = new ConfigurationDto(); result.init(data); return result; });
    addResultTypeFactory('Client___consignmentsGET', (data: any) => { const result = new ConsignmentDtoQueryResponse(); result.init(data); return result; });
    addResultTypeFactory('Client___consignmentsGET2', (data: any) => { const result = new ConsignmentDto(); result.init(data); return result; });
    addResultTypeFactory('Client___dashboardsAll', (data: any) => { const result = new DashboardDto(); result.init(data); return result; });
    addResultTypeFactory('Client___dashboardsGET', (data: any) => { const result = new DashboardDto(); result.init(data); return result; });
    addResultTypeFactory('Client___dataSourcesAll', (data: any) => { const result = new DataSourceDto(); result.init(data); return result; });
    addResultTypeFactory('Client___dataSourcesGET', (data: any) => { const result = new DataSourceDto(); result.init(data); return result; });
    addResultTypeFactory('Client___drivers', (data: any) => { const result = new EmployeeDtoQueryResponse(); result.init(data); return result; });
    addResultTypeFactory('Client___drivers2', (data: any) => { const result = new EmployeeDto(); result.init(data); return result; });
    addResultTypeFactory('Client___getHistory', (data: any) => { const result = new DriverHistoryDto(); result.init(data); return result; });
    addResultTypeFactory('Client___employeesGET', (data: any) => { const result = new EmployeeDtoQueryResponse(); result.init(data); return result; });
    addResultTypeFactory('Client___employeesGET2', (data: any) => { const result = new CompanyDto(); result.init(data); return result; });
    addResultTypeFactory('Client___deletedEmployees', (data: any) => { const result = new EmployeeDtoQueryResponse(); result.init(data); return result; });
    addResultTypeFactory('Client___failureReasonsGET', (data: any) => { const result = new FailureReasonDtoQueryResponse(); result.init(data); return result; });
    addResultTypeFactory('Client___failureReasonsGET2', (data: any) => { const result = new FailureReasonDto(); result.init(data); return result; });
    addResultTypeFactory('Client___fieldsAll', (data: any) => { const result = new FieldDto(); result.init(data); return result; });
    addResultTypeFactory('Client___fieldsGET', (data: any) => { const result = new FieldDto(); result.init(data); return result; });
    addResultTypeFactory('Client___userOrganizations', (data: any) => { const result = new OrganizationDetailsDto(); result.init(data); return result; });
    addResultTypeFactory('Client___associateCompanies', (data: any) => { const result = new CompanyDto(); result.init(data); return result; });
    addResultTypeFactory('Client___currentUser', (data: any) => { const result = new UserWithOrgDetailsDto(); result.init(data); return result; });
    addResultTypeFactory('Client___organizationUsers', (data: any) => { const result = new UserListDto(); result.init(data); return result; });
    addResultTypeFactory('Client___supportedCountries', (data: any) => { const result = new CountryDto(); result.init(data); return result; });
    addResultTypeFactory('Client___roles', (data: any) => { const result = new RoleDto(); result.init(data); return result; });
    addResultTypeFactory('Client___layoutDefinitionsAll', (data: any) => { const result = new LayoutDefinitionDto(); result.init(data); return result; });
    addResultTypeFactory('Client___layoutDefinitionsGET', (data: any) => { const result = new LayoutDefinitionDto(); result.init(data); return result; });
    addResultTypeFactory('Client___layoutParametersAll', (data: any) => { const result = new LayoutParameterDto(); result.init(data); return result; });
    addResultTypeFactory('Client___layoutParametersGET', (data: any) => { const result = new LayoutParameterDto(); result.init(data); return result; });
    addResultTypeFactory('Client___menusAll', (data: any) => { const result = new MenuDto(); result.init(data); return result; });
    addResultTypeFactory('Client___menusGET', (data: any) => { const result = new MenuDto(); result.init(data); return result; });
    addResultTypeFactory('Client___moduleButtonsAll', (data: any) => { const result = new ModuleButtonsDto(); result.init(data); return result; });
    addResultTypeFactory('Client___moduleButtonsGET', (data: any) => { const result = new ModuleButtonsDto(); result.init(data); return result; });
    addResultTypeFactory('Client___modulesAll', (data: any) => { const result = new ModuleDto(); result.init(data); return result; });
    addResultTypeFactory('Client___modulesGET', (data: any) => { const result = new ModuleDto(); result.init(data); return result; });
    addResultTypeFactory('Client___overridesAll', (data: any) => { const result = new OverrideDto(); result.init(data); return result; });
    addResultTypeFactory('Client___overridesGET', (data: any) => { const result = new OverrideDto(); result.init(data); return result; });
    addResultTypeFactory('Client___paymentTransactions', (data: any) => { const result = new PaymentTransactionsDtoQueryResponse(); result.init(data); return result; });
    addResultTypeFactory('Client___routesGET', (data: any) => { const result = new RouteDtoQueryResponse(); result.init(data); return result; });
    addResultTypeFactory('Client___routesGET2', (data: any) => { const result = new RouteDto(); result.init(data); return result; });
    addResultTypeFactory('Client___searchExpsAll', (data: any) => { const result = new SearchExpDto(); result.init(data); return result; });
    addResultTypeFactory('Client___searchExpsGET', (data: any) => { const result = new SearchExpDto(); result.init(data); return result; });
    addResultTypeFactory('Client___sectionsAll', (data: any) => { const result = new SectionDto(); result.init(data); return result; });
    addResultTypeFactory('Client___sectionsGET', (data: any) => { const result = new SectionDto(); result.init(data); return result; });
    addResultTypeFactory('Client___seriesGET', (data: any) => { const result = new SeriesDtoQueryResponse(); result.init(data); return result; });
    addResultTypeFactory('Client___seriesGET2', (data: any) => { const result = new SeriesDto(); result.init(data); return result; });
    addResultTypeFactory('Client___storageSystemGET', (data: any) => { const result = new StorageSystemDtoQueryResponse(); result.init(data); return result; });
    addResultTypeFactory('Client___storageSystemGET2', (data: any) => { const result = new StorageSystemDto(); result.init(data); return result; });
    addResultTypeFactory('Client___vehiclesGET', (data: any) => { const result = new VehicleDtoQueryResponse(); result.init(data); return result; });
    addResultTypeFactory('Client___vehiclesGET2', (data: any) => { const result = new VehicleDto(); result.init(data); return result; });
    addResultTypeFactory('Client___warehousesGET', (data: any) => { const result = new WarehouseDtoQueryResponse(); result.init(data); return result; });
    addResultTypeFactory('Client___warehousesGET2', (data: any) => { const result = new WarehouseDto(); result.init(data); return result; });
    addResultTypeFactory('Client___widgetsAll', (data: any) => { const result = new WidgetDto(); result.init(data); return result; });
    addResultTypeFactory('Client___widgetsGET', (data: any) => { const result = new WidgetDto(); result.init(data); return result; });


}
//-----/PersistorHydrator.File----